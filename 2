    def on_attendance_double_click(self, event=None):
        if not self.current_user["permissions"]["can_edit_attendance"]:
            messagebox.showwarning("تنبيه", "ليس لديك صلاحية تعديل سجلات الحضور")
            return

        item = self.attendance_tree.selection()
        if not item:
            return
        values = self.attendance_tree.item(item, "values")
        if not values:
            return

        national_id = values[1]
        date_str = self.log_date_entry.get_date().strftime("%Y-%m-%d")

        # التحقق من عمر السجل
        record_date = datetime.datetime.strptime(date_str, "%Y-%m-%d").date()
        today = datetime.datetime.now().date()
        days_diff = (today - record_date).days

        # إذا مضى أكثر من يوم
        if days_diff > 0:
            # التحقق من الصلاحية
            can_edit_old = self.current_user["permissions"].get("can_edit_old_attendance", False)
            is_admin = self.current_user["username"] == "admin"

            # إذا لم يكن admin وليس لديه صلاحية
            if not is_admin and not can_edit_old:
                messagebox.showwarning("تنبيه",
                                       "لا يمكن تعديل حالة المتدرب\nالرجاء الاتصال بالضابط المسؤول لأخذ التوجيه")
                return

        attendance_id = self.get_attendance_record_id(national_id, date_str)
        if not attendance_id:
            messagebox.showinfo("خطأ", "لا يمكن العثور على سجل الحضور المحدد.")
            return
        self.open_edit_attendance_window(attendance_id, values)

    def get_attendance_record_id(self, national_id, date_str):
        cursor = self.conn.cursor()
        cursor.execute("SELECT id FROM attendance WHERE national_id=? AND date=?", (national_id, date_str))
        result = cursor.fetchone()
        return result[0] if result else None

    # تعديل كامل لدالة open_edit_attendance_window
    def open_edit_attendance_window(self, attendance_id, row_values):
        if not self.current_user["permissions"]["can_edit_attendance"]:
            messagebox.showwarning("تنبيه", "ليس لديك صلاحية تعديل سجلات الحضور")
            return

        # الحصول على الحالة الأصلية للمتدرب
        cursor = self.conn.cursor()
        cursor.execute("SELECT original_status FROM attendance WHERE id=?", (attendance_id,))
        original_status = cursor.fetchone()[0]

        edit_window = tk.Toplevel(self.root)
        edit_window.title("تعديل حالة الحضور")
        edit_window.geometry("500x450")
        edit_window.configure(bg=self.colors["light"])
        edit_window.transient(self.root)
        edit_window.grab_set()

        x = (edit_window.winfo_screenwidth() - 500) // 2
        y = (edit_window.winfo_screenheight() - 450) // 2
        edit_window.geometry(f"500x450+{x}+{y}")

        tk.Label(edit_window, text="تعديل حالة الحضور", font=self.fonts["title"], bg=self.colors["primary"],
                 fg="white", padx=10, pady=10, width=500).pack(fill=tk.X)

        info_frame = tk.Frame(edit_window, bg=self.colors["light"], padx=20, pady=10)
        info_frame.pack(fill=tk.X)

        tk.Label(info_frame, text=f"المتدرب: {row_values[2]}", font=self.fonts["text_bold"],
                 bg=self.colors["light"]).pack(anchor=tk.W)

        tk.Label(info_frame, text=f"الحالة الحالية: {row_values[5]}", font=self.fonts["text"],
                 bg=self.colors["light"]).pack(anchor=tk.W)

        tk.Label(info_frame, text=f"الحالة الأصلية: {original_status}", font=self.fonts["text"],
                 bg=self.colors["light"]).pack(anchor=tk.W)

        new_status_frame = tk.LabelFrame(edit_window, text="اختر الحالة الجديدة", font=self.fonts["text_bold"],
                                         bg=self.colors["light"], fg=self.colors["dark"], padx=10, pady=10)
        new_status_frame.pack(fill=tk.X, padx=20, pady=10)

        status_options = ["حاضر", "متأخر", "غائب", "غائب بعذر", "لم يباشر", "حالة وفاة", "منوم"]
        status_var = tk.StringVar(value=row_values[5])

        status_combobox = ttk.Combobox(new_status_frame, textvariable=status_var, values=status_options,
                                       state="readonly", font=self.fonts["text"])
        status_combobox.pack(fill=tk.X, padx=5, pady=5)

        # إطار أسباب الغياب
        reason_frame = tk.Frame(edit_window, bg=self.colors["light"], padx=20, pady=5)
        reason_frame.pack(fill=tk.X)

        reason_label = tk.Label(reason_frame, text="سبب الغياب:", font=self.fonts["text"], bg=self.colors["light"])
        reason_entry = tk.Entry(reason_frame, font=self.fonts["text"], width=40)

        # إطار سبب التعديل
        mod_reason_frame = tk.Frame(edit_window, bg=self.colors["light"], padx=20, pady=5)
        mod_reason_frame.pack(fill=tk.X)

        mod_reason_label = tk.Label(mod_reason_frame, text="سبب التعديل:", font=self.fonts["text"],
                                    bg=self.colors["light"])
        mod_reason_entry = tk.Entry(mod_reason_frame, font=self.fonts["text"], width=40)

        def on_status_change(*args):
            # إظهار حقل سبب الغياب إذا كانت الحالة "غائب بعذر"
            if status_var.get() == "غائب بعذر":
                reason_label.pack(anchor=tk.W)
                reason_entry.pack(fill=tk.X, pady=5)
            else:
                reason_label.pack_forget()
                reason_entry.pack_forget()

            # إظهار حقل سبب التعديل فقط إذا كانت الحالة الجديدة مختلفة عن الحالة الأصلية
            if status_var.get() != original_status:
                mod_reason_label.pack(anchor=tk.W)
                mod_reason_entry.pack(fill=tk.X, pady=5)
            else:
                mod_reason_label.pack_forget()
                mod_reason_entry.pack_forget()

        status_var.trace("w", on_status_change)
        on_status_change()

        # إطار الأزرار
        button_frame = tk.Frame(edit_window, bg=self.colors["light"], pady=10)
        button_frame.pack(fill=tk.X, padx=20)

        def save_changes():
            new_status = status_var.get()
            new_reason = ""

            # معالجة خاصة لحالة "غائب بعذر"
            if new_status == "غائب بعذر":
                # إنشاء نافذة لإدخال العذر
                excuse_dialog = tk.Toplevel(edit_window)
                excuse_dialog.title("تحديد نوع العذر")
                excuse_dialog.geometry("400x300")
                excuse_dialog.configure(bg=self.colors["light"])
                excuse_dialog.transient(edit_window)
                excuse_dialog.grab_set()

                # توسيط النافذة
                x = (excuse_dialog.winfo_screenwidth() - 400) // 2
                y = (excuse_dialog.winfo_screenheight() - 300) // 2
                excuse_dialog.geometry(f"400x300+{x}+{y}")

                # محتوى النافذة
                tk.Label(
                    excuse_dialog,
                    text="تحديد نوع العذر",
                    font=self.fonts["title"],
                    bg=self.colors["primary"],
                    fg="white",
                    padx=10, pady=10
                ).pack(fill=tk.X)

                content = tk.Frame(excuse_dialog, bg=self.colors["light"], padx=20, pady=20)
                content.pack(fill=tk.BOTH, expand=True)

                excuse_type_var = tk.StringVar(value="إجازة مرضية")

                tk.Radiobutton(
                    content,
                    text="إجازة مرضية",
                    variable=excuse_type_var,
                    value="إجازة مرضية",
                    font=self.fonts["text"],
                    bg=self.colors["light"]
                ).pack(anchor=tk.W)

                tk.Radiobutton(
                    content,
                    text="أخرى",
                    variable=excuse_type_var,
                    value="أخرى",
                    font=self.fonts["text"],
                    bg=self.colors["light"]
                ).pack(anchor=tk.W)

                reason_label_dialog = tk.Label(content, text="السبب:", font=self.fonts["text_bold"],
                                               bg=self.colors["light"])
                reason_entry_dialog = tk.Entry(content, font=self.fonts["text"], width=30)

                def toggle_reason(*args):
                    if excuse_type_var.get() == "أخرى":
                        reason_label_dialog.pack(anchor=tk.W, pady=(10, 5))
                        reason_entry_dialog.pack(fill=tk.X)
                        reason_entry_dialog.focus_set()
                    else:
                        reason_label_dialog.pack_forget()
                        reason_entry_dialog.pack_forget()

                excuse_type_var.trace("w", toggle_reason)

                excuse_confirmed = [False]  # استخدام قائمة للحفظ بالمرجع

                def confirm_excuse():
                    nonlocal new_reason

                    if excuse_type_var.get() == "إجازة مرضية":
                        new_reason = "إجازة مرضية"
                    else:
                        new_reason = reason_entry_dialog.get().strip()
                        if not new_reason:
                            messagebox.showwarning("تنبيه", "الرجاء إدخال السبب")
                            return

                    # السؤال عن التكميل الرسمي
                    if messagebox.askyesno("التكميل الرسمي", "هل تريد أن يظهر هذا الغياب في التكميل الرسمي؟"):
                        new_reason += " [تكميل رسمي]"

                    excuse_confirmed[0] = True
                    excuse_dialog.destroy()

                buttons = tk.Frame(excuse_dialog, bg=self.colors["light"], pady=10)
                buttons.pack(fill=tk.X, padx=20)

                tk.Button(
                    buttons,
                    text="تأكيد",
                    font=self.fonts["text_bold"],
                    bg=self.colors["success"],
                    fg="white",
                    padx=15, pady=5,
                    bd=0, relief=tk.FLAT,
                    command=confirm_excuse
                ).pack(side=tk.LEFT, padx=5)

                tk.Button(
                    buttons,
                    text="إلغاء",
                    font=self.fonts["text_bold"],
                    bg=self.colors["danger"],
                    fg="white",
                    padx=15, pady=5,
                    bd=0, relief=tk.FLAT,
                    command=excuse_dialog.destroy
                ).pack(side=tk.RIGHT, padx=5)

                excuse_dialog.wait_window()

                if not excuse_confirmed[0]:
                    return
            else:
                new_reason = reason_entry.get().strip() if new_status == "غائب بعذر" else ""

            modification_reason = mod_reason_entry.get().strip() if new_status != original_status else ""

            # التحقق من عمر السجل
            date_str = self.log_date_entry.get_date().strftime("%Y-%m-%d")
            record_date = datetime.datetime.strptime(date_str, "%Y-%m-%d").date()
            today = datetime.datetime.now().date()
            days_diff = (today - record_date).days

            # إذا مضى أكثر من يوم
            if days_diff > 0:
                # التحقق من الصلاحية
                has_permission = (
                        self.current_user["username"] == "admin" or
                        self.current_user["permissions"].get("can_edit_old_attendance", False) == True
                )

                if not has_permission:
                    messagebox.showwarning("تنبيه",
                                           "لا يمكن تعديل حالة المتدرب\nالرجاء الاتصال بالضابط المسؤول لأخذ التوجيه")
                    return

            now_str = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

            # الحصول على الحالة القديمة وقيمة receiver_name الحالية
            cursor.execute("SELECT status, receiver_name FROM attendance WHERE id=?", (attendance_id,))
            result = cursor.fetchone()
            old_status = result[0]
            old_receiver = result[1] if result[1] else ""

            # متغير لحفظ اسم المستقبل الجديد
            new_receiver_name = old_receiver

            # التحقق إذا كانت الحالة القديمة "لم يباشر" والجديدة "حاضر" أو "متأخر"
            if old_status == "لم يباشر" and new_status in ["حاضر", "متأخر"]:
                receiver_name = self.get_receiver_name(row_values[2])  # row_values[2] هو اسم المتدرب
                if not receiver_name:
                    return
                new_receiver_name = receiver_name

            try:
                with self.conn:
                    self.conn.execute("""
                        UPDATE attendance
                        SET status=?, excuse_reason=?,
                            updated_by=?, updated_at=?, modification_reason=?,
                            receiver_name=?
                        WHERE id=?
                    """, (
                        new_status,
                        new_reason,
                        self.current_user["full_name"],
                        now_str,
                        modification_reason,
                        new_receiver_name,
                        attendance_id
                    ))

                    # تسجيل التعديل التاريخي إذا كان للأيام السابقة
                    if days_diff > 0:
                        self.conn.execute("""
                            INSERT INTO historical_edits_log (
                                attendance_id, national_id, student_name, edit_date, 
                                original_date, old_status, new_status, edited_by, 
                                edit_timestamp, days_difference
                            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        """, (
                            attendance_id,
                            row_values[1],  # national_id
                            row_values[2],  # student_name
                            datetime.datetime.now().strftime("%Y-%m-%d"),
                            date_str,
                            old_status,
                            new_status,
                            self.current_user["full_name"],
                            now_str,
                            days_diff
                        ))

                messagebox.showinfo("نجاح", "تم تحديث حالة الحضور بنجاح")
                edit_window.destroy()
                self.update_attendance_display()
                self.update_statistics()
            except Exception as e:
                messagebox.showerror("خطأ", str(e))

        def delete_record():
            # التحقق من أن المستخدم هو admin فقط
            if self.current_user["username"] != "admin":
                messagebox.showwarning("تنبيه", "لا يمكنك حذف التسجيل.. يجب تعديل حالته فقط")
                return

            if messagebox.askyesno("تأكيد الحذف",
                                   f"هل أنت متأكد من حذف تسجيل المتدرب {row_values[2]} ليوم {self.log_date_entry.get_date().strftime('%Y-%m-%d')}؟\n\nلن يظهر هذا اليوم في سجل المتدرب."):
                try:
                    with self.conn:
                        self.conn.execute("DELETE FROM attendance WHERE id=?", (attendance_id,))
                    messagebox.showinfo("نجاح", "تم حذف تسجيل المتدرب بنجاح")
                    edit_window.destroy()
                    self.update_attendance_display()
                    self.update_statistics()
                except Exception as e:
                    messagebox.showerror("خطأ", str(e))

        # إنشاء الأزرار
        save_btn = tk.Button(button_frame, text="حفظ التغييرات", font=self.fonts["text_bold"],
                             bg=self.colors["success"], fg="white", padx=15, pady=5, bd=0,
                             relief=tk.FLAT, cursor="hand2", command=save_changes)
        save_btn.pack(side=tk.LEFT, padx=5)

        delete_btn = tk.Button(button_frame, text="حذف التسجيل", font=self.fonts["text_bold"],
                               bg="#FF5722", fg="white", padx=15, pady=5, bd=0,
                               relief=tk.FLAT, cursor="hand2", command=delete_record)
        delete_btn.pack(side=tk.LEFT, padx=5)

        cancel_btn = tk.Button(button_frame, text="إلغاء", font=self.fonts["text_bold"],
                               bg=self.colors["danger"], fg="white", padx=15, pady=5, bd=0,
                               relief=tk.FLAT, cursor="hand2", command=edit_window.destroy)
        cancel_btn.pack(side=tk.RIGHT, padx=5)



            def view_student_profile(self):
        selected_item = self.students_tree.selection()
        if not selected_item:
            messagebox.showinfo("تنبيه", "الرجاء تحديد متدرب من القائمة")
            return
        values = self.students_tree.item(selected_item, "values")
        if not values:
            return

    def view_student_profile(self):
        selected_item = self.students_tree.selection()
        if not selected_item:
            messagebox.showinfo("تنبيه", "الرجاء تحديد متدرب من القائمة")
            return
        values = self.students_tree.item(selected_item, "values")
        if not values:
            return

        nid = values[0]
        name = values[1]

        # الحصول على معلومات المتدرب بشكل منفصل
        cursor = self.conn.cursor()
        cursor.execute("SELECT * FROM trainees WHERE national_id=?", (nid,))
        student = cursor.fetchone()

        if not student:
            messagebox.showinfo("تنبيه", "لا توجد معلومات عن هذا المتدرب")
            return

        # الحصول على سجلات الحضور بشكل منفصل
        cursor.execute("""
            SELECT id, national_id, name, rank, course, time, date, status, original_status, 
                   registered_by, excuse_reason, updated_by, updated_at, modification_reason
            FROM attendance 
            WHERE national_id=?
            ORDER BY date DESC
        """, (nid,))
        attendance_records = cursor.fetchall()

        # تعريف المتغيرات الإحصائية مسبقًا بقيم افتراضية
        present_count = 0
        absent_count = 0
        late_count = 0
        excused_count = 0
        not_started_count = 0
        field_app_count = 0
        student_day_count = 0
        evening_remote_count = 0

        # حساب الإحصائيات مباشرة من قاعدة البيانات
        cursor.execute("""
            SELECT 
                COUNT(CASE WHEN status = 'حاضر' THEN 1 END) as present_count,
                COUNT(CASE WHEN status = 'غائب' THEN 1 END) as absent_count,
                COUNT(CASE WHEN status = 'متأخر' THEN 1 END) as late_count,
                COUNT(CASE WHEN status = 'غائب بعذر' THEN 1 END) as excused_count,
                COUNT(CASE WHEN status = 'لم يباشر' THEN 1 END) as not_started_count,
                COUNT(CASE WHEN status = 'تطبيق ميداني' THEN 1 END) as field_app_count,
                COUNT(CASE WHEN status = 'يوم طالب' THEN 1 END) as student_day_count,
                COUNT(CASE WHEN status = 'مسائية / عن بعد' THEN 1 END) as evening_remote_count,
                COUNT(CASE WHEN status = 'حالة وفاة' THEN 1 END) as death_case_count,
                COUNT(CASE WHEN status = 'منوم' THEN 1 END) as hospital_count
            FROM attendance
            WHERE national_id=?
        """, (nid,))

        stats = cursor.fetchone()
        if stats:
            present_count = stats[0] or 0
            absent_count = stats[1] or 0
            late_count = stats[2] or 0
            excused_count = stats[3] or 0
            not_started_count = stats[4] or 0
            field_app_count = stats[5] or 0
            student_day_count = stats[6] or 0
            evening_remote_count = stats[7] or 0
            death_case_count = stats[8] or 0  # إضافة جديدة
            hospital_count = stats[9] or 0  # إضافة جديدة

        # تصنيف السجلات حسب الحالة
        not_started_records = []
        absent_records = []
        late_records = []
        excused_records = []
        present_records = []
        field_application_records = []
        student_day_records = []
        evening_remote_records = []
        death_case_records = []  # قائمة لحالات الوفاة
        hospital_records = []  # قائمة للمنومين

        for record in attendance_records:
            status = record[7]  # حقل الحالة
            if status == "حاضر":
                present_records.append(record)
            elif status == "غائب":
                absent_records.append(record)
            elif status == "متأخر":
                late_records.append(record)
            elif status == "غائب بعذر":
                excused_records.append(record)
            elif status == "لم يباشر":
                not_started_records.append(record)
            elif status == "تطبيق ميداني":
                field_application_records.append(record)
            elif status == "يوم طالب":
                student_day_records.append(record)
            elif status == "مسائية / عن بعد":
                evening_remote_records.append(record)
            elif status == "حالة وفاة":
                death_case_records.append(record)
            elif status == "منوم":
                hospital_records.append(record)

        # إنشاء نافذة ملف المتدرب
        profile_window = tk.Toplevel(self.root)
        profile_window.bind("<Motion>", lambda e: self.root.reset_activity_timer() if hasattr(self.root,
                                                                                              'reset_activity_timer') else None)
        profile_window.title(f"ملف المتدرب - {name}")
        profile_window.geometry("1000x800")  # زيادة الارتفاع
        profile_window.minsize(800, 600)
        profile_window.configure(bg=self.colors["light"])
        profile_window.resizable(True, True)

        x = (profile_window.winfo_screenwidth() - 1000) // 2
        y = (profile_window.winfo_screenheight() - 800) // 2
        profile_window.geometry(f"1000x800+{x}+{y}")

        header_frame = tk.Frame(profile_window, bg=self.colors["primary"], padx=20, pady=15)
        header_frame.pack(fill=tk.X)

        # إضافة حالة الاستبعاد في العنوان إذا كان المتدرب مستبعد
        if student[5] == 1:  # is_excluded
            exclusion_status = "- مستبعد"
            status_color = self.colors["excluded"]
        else:
            exclusion_status = ""
            status_color = self.colors["primary"]

        tk.Label(header_frame, text=f"ملف المتدرب: {name} {exclusion_status}",
                 font=self.fonts["large_title"], bg=self.colors["primary"], fg="white").pack(anchor=tk.W)

        tk.Label(header_frame,
                 text=f"رقم الهوية: {nid} | الرتبة: {values[2]} | الدورة: {values[3]} | الجوال: {values[4]}",
                 font=self.fonts["text"], bg=self.colors["primary"], fg="white"
                 ).pack(anchor=tk.W, pady=(5, 0))

        # إضافة سبب الاستبعاد إذا كان المتدرب مستبعد
        if student[5] == 1:  # is_excluded
            tk.Label(header_frame,
                     text=f"سبب الاستبعاد: {student[6]} | تاريخ الاستبعاد: {student[7]}",
                     font=self.fonts["text_bold"], bg=self.colors["primary"], fg="#ffcdd2"
                     ).pack(anchor=tk.W, pady=(5, 0))

        summary_frame = tk.Frame(profile_window, bg=self.colors["light"], padx=20, pady=15)
        summary_frame.pack(fill=tk.X)

        # إضافة زر استبعاد/إلغاء استبعاد المتدرب في أعلى النافذة
        exclusion_frame = tk.Frame(summary_frame, bg=self.colors["light"], pady=5)
        exclusion_frame.pack(fill=tk.X)

        if student[5] == 1:  # المتدرب مستبعد
            exclude_button = tk.Button(
                exclusion_frame,
                text="إلغاء استبعاد المتدرب",
                font=self.fonts["text_bold"],
                bg=self.colors["success"],
                fg="white",
                padx=15, pady=5,
                bd=0, relief=tk.FLAT,
                cursor="hand2",
                command=lambda: self.toggle_student_exclusion(nid, False, profile_window)
            )
            exclude_button.pack(pady=10)
        else:
            exclude_button = tk.Button(
                exclusion_frame,
                text="استبعاد المتدرب",
                font=self.fonts["text_bold"],
                bg=self.colors["excluded"],
                fg="white",
                padx=15, pady=5,
                bd=0, relief=tk.FLAT,
                cursor="hand2",
                command=lambda: self.toggle_student_exclusion(nid, True, profile_window)
            )
            exclude_button.pack(pady=10)

        stats_frame = tk.Frame(summary_frame, bg=self.colors["light"])
        stats_frame.pack(fill=tk.X)

        # استخدام الإحصائيات المحسوبة من قاعدة البيانات
        attendance_stats = [
            # السجلات الموجودة
            ("إجمالي أيام الحضور", present_count, self.colors["success"]),
            ("أيام التأخير", late_count, self.colors["late"]),
            ("أيام الغياب", absent_count, self.colors["danger"]),
            ("غياب بعذر", excused_count, self.colors["excused"]),
            ("لم يباشر", not_started_count, self.colors["not_started"]),
            ("تطبيق ميداني", field_app_count, self.colors["field_application"]),
            ("يوم طالب", student_day_count, self.colors["student_day"]),
            ("مسائية / عن بعد", evening_remote_count, self.colors["evening_remote"]),
            # إضافة الحالات الجديدة
            ("حالة وفاة", death_case_count, self.colors["death_case"]),
            ("منوم", hospital_count, self.colors["hospital"])
        ]

        for title, count, color in attendance_stats:
            stat_frame = tk.Frame(stats_frame, bg=self.colors["light"], bd=1, relief=tk.RIDGE, padx=5, pady=5)
            stat_frame.pack(side=tk.LEFT, expand=True, fill=tk.X, padx=5)
            tk.Label(stat_frame, text=title, font=self.fonts["text_bold"], bg=color, fg="white", padx=5, pady=5).pack(
                fill=tk.X)
            tk.Label(stat_frame, text=str(count), font=self.fonts["title"], bg=self.colors["light"]).pack(fill=tk.X,
                                                                                                          pady=5)

        details_notebook = ttk.Notebook(profile_window)
        details_notebook.pack(fill=tk.BOTH, expand=True, padx=20, pady=15)

        details_notebook = ttk.Notebook(profile_window)
        details_notebook.pack(fill=tk.BOTH, expand=True, padx=20, pady=15)

        # إضافة تبويب المخالفات والإجراءات التأديبية
        violations_frame = tk.Frame(details_notebook, bg=self.colors["light"])
        details_notebook.add(violations_frame, text="المخالفات والإجراءات التأديبية")

        # استرجاع سجل المخالفات الخاص بالمتدرب
        cursor.execute("""
            SELECT id, violation_date, violation_type, description, 
                   action_taken, action_date, recorded_by, notes
            FROM student_violations
            WHERE national_id=?
            ORDER BY violation_date DESC
        """, (nid,))
        violations_records = cursor.fetchall()

        if violations_records:
            # إنشاء جدول لعرض المخالفات
            violations_tree = self.create_violations_table(violations_frame, violations_records)
        else:
            tk.Label(violations_frame, text="لا توجد مخالفات أو إجراءات تأديبية مسجلة",
                     font=self.fonts["subtitle"], bg=self.colors["light"], fg=self.colors["dark"],
                     pady=20).pack()

        # زر تسجيل مخالفة جديدة - خارج الشرط ليظهر دائمًا
        add_violation_btn = tk.Button(
            violations_frame,
            text="تسجيل مخالفة جديدة",
            font=self.fonts["text_bold"],
            bg=self.colors["warning"],
            fg="white",
            padx=10, pady=5,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=lambda: self.add_student_violation(nid, name, profile_window)
        )
        add_violation_btn.pack(pady=10)

        # دالات إنشاء الجداول اعتمادًا على صلاحيات المستخدم
        def create_attendance_detail_table(parent_frame, records):
            table_frame = tk.Frame(parent_frame, bg=self.colors["light"])
            table_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
            scrollbar = tk.Scrollbar(table_frame)
            scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

            # تحديد الأعمدة بناءً على صلاحيات المستخدم
            if self.current_user["permissions"]["can_view_edit_history"]:
                columns = ["date", "time", "registered_col", "updated_col", "mod_reason", "updated_when"]
            else:
                columns = ["date", "time", "registered_col"]

            detail_tree = ttk.Treeview(table_frame, columns=columns, show="headings",
                                       yscrollcommand=scrollbar.set, style="Profile.Treeview")

            detail_tree.heading("date", text="التاريخ")
            detail_tree.column("date", width=100, anchor=tk.CENTER)
            detail_tree.heading("time", text="الوقت")
            detail_tree.column("time", width=100, anchor=tk.CENTER)
            detail_tree.heading("registered_col", text="سجّل بواسطة")
            detail_tree.column("registered_col", width=180, anchor=tk.W)

            # إضافة أعمدة التعديل فقط للمستخدمين المصرح لهم
            if self.current_user["permissions"]["can_view_edit_history"]:
                detail_tree.heading("updated_col", text="من عدّل")
                detail_tree.column("updated_col", width=180, anchor=tk.W)
                detail_tree.heading("mod_reason", text="سبب التعديل")
                detail_tree.column("mod_reason", width=140, anchor=tk.W)
                detail_tree.heading("updated_when", text="وقت آخر تعديل")
                detail_tree.column("updated_when", width=150, anchor=tk.W)

            for rec in records:
                date_ = rec[6]
                time_ = rec[5]
                orig_status = rec[8] if rec[8] else rec[7]
                reg_by_ = rec[9]
                upd_by_ = rec[11] if rec[11] else ""
                upd_at_ = rec[12] if rec[12] else ""
                # تعديل مهم: عرض سبب التعديل فقط إذا كان هناك تعديل
                mod_reason_ = rec[13] if len(rec) > 13 and rec[13] and upd_by_ else ""
                registered_text = f"{reg_by_} (الحالة الاصلية: {orig_status})"

                if self.current_user["permissions"]["can_view_edit_history"]:
                    if upd_by_:
                        updated_text = f"{upd_by_} عدّلها إلى: {rec[7]}"
                    else:
                        updated_text = ""
                    detail_tree.insert("", tk.END,
                                       values=(date_, time_, registered_text, updated_text, mod_reason_, upd_at_))
                else:
                    detail_tree.insert("", tk.END, values=(date_, time_, registered_text))

            detail_tree.pack(fill=tk.BOTH, expand=True)
            scrollbar.config(command=detail_tree.yview)

        def create_excused_detail_table(parent_frame, records):
            table_frame = tk.Frame(parent_frame, bg=self.colors["light"])
            table_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
            scrollbar = tk.Scrollbar(table_frame)
            scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

            # تحديد الأعمدة بناءً على صلاحيات المستخدم
            if self.current_user["permissions"]["can_view_edit_history"]:
                columns = ["date", "time", "registered_col", "excuse_reason", "updated_col", "mod_reason",
                           "updated_when"]
            else:
                columns = ["date", "time", "registered_col", "excuse_reason"]

            detail_tree = ttk.Treeview(table_frame, columns=columns, show="headings",
                                       yscrollcommand=scrollbar.set, style="Profile.Treeview")

            detail_tree.heading("date", text="التاريخ")
            detail_tree.column("date", width=100, anchor=tk.CENTER)
            detail_tree.heading("time", text="الوقت")
            detail_tree.column("time", width=100, anchor=tk.CENTER)
            detail_tree.heading("registered_col", text="سجّل بواسطة")
            detail_tree.column("registered_col", width=150, anchor=tk.W)
            detail_tree.heading("excuse_reason", text="سبب الغياب")
            detail_tree.column("excuse_reason", width=120, anchor=tk.W)

            # إضافة أعمدة التعديل فقط للمستخدمين المصرح لهم
            if self.current_user["permissions"]["can_view_edit_history"]:
                detail_tree.heading("updated_col", text="من عدّل")
                detail_tree.column("updated_col", width=120, anchor=tk.W)
                detail_tree.heading("mod_reason", text="سبب التعديل")
                detail_tree.column("mod_reason", width=140, anchor=tk.W)
                detail_tree.heading("updated_when", text="وقت آخر تعديل")
                detail_tree.column("updated_when", width=120, anchor=tk.W)

            for rec in records:
                date_ = rec[6]
                time_ = rec[5]
                orig_status = rec[8] if rec[8] else rec[7]
                reg_by_ = rec[9]
                excuse_ = rec[10] if rec[10] else "لا يوجد"
                upd_by_ = rec[11] if rec[11] else ""
                upd_at_ = rec[12] if rec[12] else ""
                # تعديل مهم: عرض سبب التعديل فقط إذا كان هناك تعديل (upd_by_ غير فارغ)
                mod_reason_ = rec[13] if len(rec) > 13 and rec[13] and upd_by_ else ""

                registered_text = f"{reg_by_} (الحالة الاصلية: {orig_status})"

                if self.current_user["permissions"]["can_view_edit_history"]:
                    if upd_by_:
                        updated_text = f"{upd_by_} عدّلها إلى: {rec[7]}"
                    else:
                        updated_text = ""
                    detail_tree.insert("", tk.END,
                                       values=(
                                           date_, time_, registered_text, excuse_, updated_text, mod_reason_, upd_at_))
                else:
                    detail_tree.insert("", tk.END, values=(date_, time_, registered_text, excuse_))

            detail_tree.pack(fill=tk.BOTH, expand=True)
            scrollbar.config(command=detail_tree.yview)

        # تبويبات مفصلة
        not_started_frame = tk.Frame(details_notebook, bg=self.colors["light"])
        details_notebook.add(not_started_frame, text=f"لم يباشر ({len(not_started_records)})")
        if not_started_records:
            create_attendance_detail_table(not_started_frame, not_started_records)
        else:
            tk.Label(not_started_frame, text="لا توجد أيام (لم يباشر)", font=self.fonts["subtitle"],
                     bg=self.colors["light"], fg=self.colors["dark"], pady=20).pack()

        absent_frame = tk.Frame(details_notebook, bg=self.colors["light"])
        details_notebook.add(absent_frame, text=f"الغياب ({len(absent_records)})")
        if absent_records:
            create_attendance_detail_table(absent_frame, absent_records)
        else:
            tk.Label(absent_frame, text="لا توجد أيام غياب", font=self.fonts["subtitle"],
                     bg=self.colors["light"], fg=self.colors["dark"], pady=20).pack()

        late_frame = tk.Frame(details_notebook, bg=self.colors["light"])
        details_notebook.add(late_frame, text=f"التأخير ({len(late_records)})")
        if late_records:
            create_attendance_detail_table(late_frame, late_records)
        else:
            tk.Label(late_frame, text="لا توجد أيام تأخير", font=self.fonts["subtitle"],
                     bg=self.colors["light"], fg=self.colors["dark"], pady=20).pack()

        excused_frame = tk.Frame(details_notebook, bg=self.colors["light"])
        details_notebook.add(excused_frame, text=f"غياب بعذر ({len(excused_records)})")
        if excused_records:
            create_excused_detail_table(excused_frame, excused_records)
        else:
            tk.Label(excused_frame, text="لا توجد أيام غياب بعذر", font=self.fonts["subtitle"],
                     bg=self.colors["light"], fg=self.colors["dark"], pady=20).pack()

        present_frame = tk.Frame(details_notebook, bg=self.colors["light"])
        details_notebook.add(present_frame, text=f"الحضور ({len(present_records)})")
        if present_records:
            create_attendance_detail_table(present_frame, present_records)
        else:
            tk.Label(present_frame, text="لا توجد أيام حضور", font=self.fonts["subtitle"],
                     bg=self.colors["light"], fg=self.colors["dark"], pady=20).pack()

        # إضافة تبويبات للحالات الجديدة
        field_app_frame = tk.Frame(details_notebook, bg=self.colors["light"])
        details_notebook.add(field_app_frame, text=f"تطبيق ميداني ({len(field_application_records)})")
        if field_application_records:
            create_attendance_detail_table(field_app_frame, field_application_records)
        else:
            tk.Label(field_app_frame, text="لا توجد أيام تطبيق ميداني", font=self.fonts["subtitle"],
                     bg=self.colors["light"], fg=self.colors["dark"], pady=20).pack()

        student_day_frame = tk.Frame(details_notebook, bg=self.colors["light"])
        details_notebook.add(student_day_frame, text=f"يوم طالب ({len(student_day_records)})")
        if student_day_records:
            create_attendance_detail_table(student_day_frame, student_day_records)
        else:
            tk.Label(student_day_frame, text="لا توجد أيام متدرب", font=self.fonts["subtitle"],
                     bg=self.colors["light"], fg=self.colors["dark"], pady=20).pack()

        evening_remote_frame = tk.Frame(details_notebook, bg=self.colors["light"])
        details_notebook.add(evening_remote_frame, text=f"مسائية / عن بعد ({len(evening_remote_records)})")
        if evening_remote_records:
            create_attendance_detail_table(evening_remote_frame, evening_remote_records)
        else:
            tk.Label(evening_remote_frame, text="لا توجد أيام مسائية / عن بعد", font=self.fonts["subtitle"],
                     bg=self.colors["light"], fg=self.colors["dark"], pady=20).pack()
        # بعد التبويبات الموجودة
        death_case_frame = tk.Frame(details_notebook, bg=self.colors["light"])
        details_notebook.add(death_case_frame, text=f"حالة وفاة ({len(death_case_records)})")
        if death_case_records:
            create_excused_detail_table(death_case_frame, death_case_records)
        else:
            tk.Label(death_case_frame, text="لا توجد حالات وفاة", font=self.fonts["subtitle"],
                     bg=self.colors["light"], fg=self.colors["dark"], pady=20).pack()

        hospital_frame = tk.Frame(details_notebook, bg=self.colors["light"])
        details_notebook.add(hospital_frame, text=f"منوم ({len(hospital_records)})")
        if hospital_records:
            create_excused_detail_table(hospital_frame, hospital_records)
        else:
            tk.Label(hospital_frame, text="لا توجد حالات منوم", font=self.fonts["subtitle"],
                     bg=self.colors["light"], fg=self.colors["dark"], pady=20).pack()

        # إضافة إطار للأزرار
        button_frame = tk.Frame(profile_window, bg=self.colors["light"])
        button_frame.pack(pady=15)

        # إضافة زر تصدير محاضر غيابات المتدرب
        absence_report_btn = tk.Button(
            button_frame,
            text="تصدير محاضر غيابات المتدرب",
            font=self.fonts["text_bold"],
            bg="#8E44AD",  # لون أرجواني
            fg="white",
            padx=15, pady=5,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=lambda: self.export_student_absence_reports(student, attendance_records)
        )
        absence_report_btn.pack(side=tk.LEFT, padx=10)

        export_comprehensive_btn = tk.Button(
            button_frame,
            text="تصدير التقرير الشامل للمتدرب",
            font=self.fonts["text_bold"],
            bg=self.colors["primary"],
            fg="white",
            padx=15, pady=5,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=lambda: self.export_student_to_word(student, attendance_records)
        )
        export_comprehensive_btn.pack(side=tk.LEFT, padx=10)

        # زر الإغلاق
        close_btn = tk.Button(
            button_frame,
            text="إغلاق",
            font=self.fonts["text_bold"],
            bg=self.colors["dark"],
            fg="white",
            padx=15, pady=5,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=profile_window.destroy
        )
        close_btn.pack(side=tk.LEFT, padx=10)

    def create_violations_table(self, parent_frame, violations_records):
        """إنشاء جدول لعرض مخالفات المتدرب مع النوع المخصص"""
        table_frame = tk.Frame(parent_frame, bg=self.colors["light"])
        table_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)

        scrollbar = tk.Scrollbar(table_frame)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        # تحديد الأعمدة مع إضافة عمود الخصم
        columns = ["date", "type", "desc", "action", "action_date", "deduction", "recorded_by"]

        violations_tree = ttk.Treeview(table_frame, columns=columns,
                                       show="headings", yscrollcommand=scrollbar.set,
                                       style="Profile.Treeview")

        # تعريف العناوين
        violations_tree.heading("date", text="تاريخ المخالفة")
        violations_tree.column("date", width=100, anchor=tk.CENTER)

        violations_tree.heading("type", text="نوع المخالفة")
        violations_tree.column("type", width=120, anchor=tk.CENTER)

        violations_tree.heading("desc", text="وصف المخالفة")
        violations_tree.column("desc", width=150, anchor=tk.W)

        violations_tree.heading("action", text="الإجراء المتخذ")
        violations_tree.column("action", width=120, anchor=tk.CENTER)

        violations_tree.heading("action_date", text="تاريخ الإجراء")
        violations_tree.column("action_date", width=100, anchor=tk.CENTER)

        violations_tree.heading("deduction", text="الخصم")
        violations_tree.column("deduction", width=60, anchor=tk.CENTER)

        violations_tree.heading("recorded_by", text="المسجل")
        violations_tree.column("recorded_by", width=100, anchor=tk.W)

        # إضافة البيانات
        for rec in violations_records:
            # الحصول على البيانات الإضافية
            cursor = self.conn.cursor()
            cursor.execute("""
                SELECT behavior_deduction, custom_action, custom_violation_type 
                FROM student_violations 
                WHERE id=?
            """, (rec[0],))
            extra_data = cursor.fetchone()

            behavior_deduction = extra_data[0] if extra_data else 0
            custom_action = extra_data[1] if extra_data else ""
            custom_violation_type = extra_data[2] if extra_data and len(extra_data) > 2 else ""

            violation_id = rec[0]
            violation_date = rec[1]
            violation_type = rec[2]
            description = rec[3]
            action_taken = rec[4]
            action_date = rec[5]
            recorded_by = rec[6]

            # استخدام النوع المخصص إذا كان النوع "أخرى"
            display_type = custom_violation_type if violation_type == "أخرى" and custom_violation_type else violation_type

            # استخدام الإجراء المخصص إذا كان الإجراء "أخرى"
            display_action = custom_action if action_taken == "أخرى" and custom_action else action_taken

            violations_tree.insert("", tk.END, values=(
                violation_date, display_type, description,
                display_action, action_date, f"{behavior_deduction} درجة", recorded_by),
                                   tags=("violation",))

        # تنسيق صفوف الجدول
        violations_tree.tag_configure("violation", background="#FFF3E0")

        violations_tree.pack(fill=tk.BOTH, expand=True)
        scrollbar.config(command=violations_tree.yview)

        # إضافة معالجة النقر المزدوج لعرض التفاصيل أو التعديل
        violations_tree.bind("<Double-1>", lambda event: self.view_violation_details(event, violations_tree))

        return violations_tree

    def add_student_violation(self, national_id, student_name, parent_window):
        """إضافة مخالفة جديدة للمتدرب مع خصم درجات السلوك ونوع مخالفة مخصص"""
        if not self.current_user["permissions"]["can_edit_students"]:
            messagebox.showwarning("تنبيه", "ليس لديك صلاحية تسجيل المخالفات")
            return

        violation_window = tk.Toplevel(parent_window)
        violation_window.title(f"تسجيل مخالفة جديدة - {student_name}")
        violation_window.geometry("700x750")  # زيادة الارتفاع قليلاً
        violation_window.configure(bg=self.colors["light"])
        violation_window.transient(parent_window)
        violation_window.grab_set()

        # توسيط النافذة
        x = (violation_window.winfo_screenwidth() - 700) // 2
        y = (violation_window.winfo_screenheight() - 750) // 2
        violation_window.geometry(f"700x750+{x}+{y}")

        tk.Label(
            violation_window,
            text=f"تسجيل مخالفة جديدة للمتدرب: {student_name}",
            font=self.fonts["title"],
            bg=self.colors["primary"],
            fg="white",
            padx=10, pady=10
        ).pack(fill=tk.X)

        form_frame = tk.Frame(violation_window, bg=self.colors["light"], padx=20, pady=20)
        form_frame.pack(fill=tk.BOTH, expand=True)

        # نوع المخالفة
        tk.Label(form_frame, text="نوع المخالفة:", font=self.fonts["text_bold"],
                 bg=self.colors["light"]).grid(row=0, column=1, sticky=tk.E, padx=5, pady=8)

        violation_types = [
            "تأخير متكرر",
            "غياب متكرر",
            "مخالفة تعليمات التدريب المستديمة",
            "عدم إنضباط",
            "أخرى"
        ]

        type_var = tk.StringVar()
        type_combo = ttk.Combobox(form_frame, textvariable=type_var, values=violation_types,
                                  font=self.fonts["text"], width=30)
        type_combo.grid(row=0, column=0, sticky=tk.W, padx=5, pady=8)

        # إطار نوع المخالفة المخصص (يظهر عند اختيار "أخرى")
        custom_type_frame = tk.Frame(form_frame, bg=self.colors["light"])
        custom_type_frame.grid(row=1, column=0, columnspan=2, sticky=tk.W, padx=5, pady=5)
        custom_type_frame.grid_remove()  # إخفائه افتراضياً

        tk.Label(custom_type_frame, text="حدد نوع المخالفة:", font=self.fonts["text_bold"],
                 bg=self.colors["light"]).pack(side=tk.RIGHT, padx=5)

        custom_type_var = tk.StringVar()
        custom_type_entry = tk.Entry(custom_type_frame, textvariable=custom_type_var,
                                     font=self.fonts["text"], width=30)
        custom_type_entry.pack(side=tk.LEFT, padx=5)

        # دالة لإظهار/إخفاء حقل نوع المخالفة المخصص
        def on_type_change(event=None):
            if type_var.get() == "أخرى":
                custom_type_frame.grid()
                custom_type_entry.focus_set()
            else:
                custom_type_frame.grid_remove()
                custom_type_var.set("")

        type_combo.bind("<<ComboboxSelected>>", on_type_change)

        # تاريخ المخالفة
        tk.Label(form_frame, text="تاريخ المخالفة:", font=self.fonts["text_bold"],
                 bg=self.colors["light"]).grid(row=2, column=1, sticky=tk.E, padx=5, pady=8)

        violation_date = DateEntry(
            form_frame,
            width=15,
            background=self.colors["primary"],
            foreground='white',
            borderwidth=2,
            date_pattern='yyyy-mm-dd',
            font=self.fonts["text"]
        )
        violation_date.grid(row=2, column=0, sticky=tk.W, padx=5, pady=8)

        # وصف المخالفة
        tk.Label(form_frame, text="وصف المخالفة:", font=self.fonts["text_bold"],
                 bg=self.colors["light"]).grid(row=3, column=1, sticky=tk.NE, padx=5, pady=8)

        description_text = tk.Text(form_frame, font=self.fonts["text"], height=4, width=40)
        description_text.grid(row=3, column=0, sticky=tk.W, padx=5, pady=8)

        # الإجراء المتخذ
        tk.Label(form_frame, text="الإجراء المتخذ:", font=self.fonts["text_bold"],
                 bg=self.colors["light"]).grid(row=4, column=1, sticky=tk.E, padx=5, pady=8)

        action_types = [
            "تعهد خطي",
            "إنذار",
            "توقيف",
            "أخرى"
        ]

        action_var = tk.StringVar()
        action_combo = ttk.Combobox(form_frame, textvariable=action_var, values=action_types,
                                    font=self.fonts["text"], width=30)
        action_combo.grid(row=4, column=0, sticky=tk.W, padx=5, pady=8)

        # إطار الإجراء المخصص (يظهر عند اختيار "أخرى")
        custom_action_frame = tk.Frame(form_frame, bg=self.colors["light"])
        custom_action_frame.grid(row=5, column=0, columnspan=2, sticky=tk.W, padx=5, pady=5)
        custom_action_frame.grid_remove()  # إخفائه افتراضياً

        tk.Label(custom_action_frame, text="حدد الإجراء:", font=self.fonts["text_bold"],
                 bg=self.colors["light"]).pack(side=tk.RIGHT, padx=5)

        custom_action_var = tk.StringVar()
        custom_action_entry = tk.Entry(custom_action_frame, textvariable=custom_action_var,
                                       font=self.fonts["text"], width=30)
        custom_action_entry.pack(side=tk.LEFT, padx=5)

        # دالة لإظهار/إخفاء حقل الإجراء المخصص
        def on_action_change(event=None):
            if action_var.get() == "أخرى":
                custom_action_frame.grid()
            else:
                custom_action_frame.grid_remove()
                custom_action_var.set("")

        action_combo.bind("<<ComboboxSelected>>", on_action_change)

        # تاريخ الإجراء
        tk.Label(form_frame, text="تاريخ الإجراء:", font=self.fonts["text_bold"],
                 bg=self.colors["light"]).grid(row=6, column=1, sticky=tk.E, padx=5, pady=8)

        action_date = DateEntry(
            form_frame,
            width=15,
            background=self.colors["primary"],
            foreground='white',
            borderwidth=2,
            date_pattern='yyyy-mm-dd',
            font=self.fonts["text"]
        )
        action_date.grid(row=6, column=0, sticky=tk.W, padx=5, pady=8)

        # درجات الخصم من السلوك
        tk.Label(form_frame, text="درجات الخصم من السلوك:", font=self.fonts["text_bold"],
                 bg=self.colors["light"]).grid(row=7, column=1, sticky=tk.E, padx=5, pady=8)

        deduction_frame = tk.Frame(form_frame, bg=self.colors["light"])
        deduction_frame.grid(row=7, column=0, sticky=tk.W, padx=5, pady=8)

        deduction_var = tk.IntVar(value=0)
        deduction_spinbox = tk.Spinbox(deduction_frame, from_=0, to=100, width=10,
                                       textvariable=deduction_var, font=self.fonts["text"])
        deduction_spinbox.pack(side=tk.LEFT, padx=5)

        tk.Label(deduction_frame, text="درجة", font=self.fonts["text"],
                 bg=self.colors["light"]).pack(side=tk.LEFT)

        # إضافة معلومات إرشادية
        tk.Label(deduction_frame, text="(0 = بدون خصم)", font=self.fonts["small"],
                 bg=self.colors["light"], fg=self.colors["secondary"]).pack(side=tk.LEFT, padx=10)

        # ملاحظات إضافية
        tk.Label(form_frame, text="ملاحظات:", font=self.fonts["text_bold"],
                 bg=self.colors["light"]).grid(row=8, column=1, sticky=tk.NE, padx=5, pady=8)

        notes_text = tk.Text(form_frame, font=self.fonts["text"], height=3, width=40)
        notes_text.grid(row=8, column=0, sticky=tk.W, padx=5, pady=8)

        # إضافة مرفق (اختياري)
        attachment_frame = tk.Frame(form_frame, bg=self.colors["light"])
        attachment_frame.grid(row=9, column=0, columnspan=2, sticky=tk.W, padx=5, pady=8)

        attachment_var = tk.StringVar()

        tk.Label(attachment_frame, text="مرفق (اختياري):",
                 font=self.fonts["text_bold"], bg=self.colors["light"]).pack(side=tk.RIGHT, padx=5)

        attachment_entry = tk.Entry(attachment_frame, textvariable=attachment_var,
                                    font=self.fonts["text"], width=30, state="readonly")
        attachment_entry.pack(side=tk.RIGHT, padx=5)

        def browse_file():
            file_path = filedialog.askopenfilename(
                title="اختر ملف المرفق",
                filetypes=[
                    ("PDF files", "*.pdf"),
                    ("Image files", "*.jpg *.jpeg *.png"),
                    ("All files", "*.*")
                ]
            )
            if file_path:
                attachment_var.set(file_path)

        browse_btn = tk.Button(
            attachment_frame,
            text="استعراض...",
            font=self.fonts["text"],
            bg=self.colors["secondary"],
            fg="white",
            padx=5, pady=2,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=browse_file
        )
        browse_btn.pack(side=tk.RIGHT, padx=5)

        # أزرار الحفظ والإلغاء
        button_frame = tk.Frame(violation_window, bg=self.colors["light"], pady=10)
        button_frame.pack(fill=tk.X, padx=20)

        def save_violation():
            # التحقق من البيانات الإلزامية
            if not type_var.get() or not action_var.get():
                messagebox.showwarning("تنبيه", "يجب تحديد نوع المخالفة والإجراء المتخذ")
                return

            # إذا كان نوع المخالفة "أخرى"، التحقق من إدخال النوع المخصص
            if type_var.get() == "أخرى" and not custom_type_var.get().strip():
                messagebox.showwarning("تنبيه", "يجب تحديد نوع المخالفة")
                return

            # إذا كان الإجراء "أخرى"، التحقق من إدخال الإجراء المخصص
            if action_var.get() == "أخرى" and not custom_action_var.get().strip():
                messagebox.showwarning("تنبيه", "يجب تحديد الإجراء المتخذ")
                return

            # استخلاص البيانات من النموذج
            v_type = type_var.get()
            custom_v_type = custom_type_var.get().strip() if type_var.get() == "أخرى" else ""
            v_date = violation_date.get_date().strftime("%Y-%m-%d")
            v_desc = description_text.get("1.0", tk.END).strip()
            a_type = action_var.get()
            custom_action = custom_action_var.get().strip() if action_var.get() == "أخرى" else ""
            a_date = action_date.get_date().strftime("%Y-%m-%d")
            notes = notes_text.get("1.0", tk.END).strip()
            attachment = attachment_var.get()
            behavior_deduction = deduction_var.get()

            # نسخ الملف المرفق إلى مجلد المرفقات إذا وجد
            attachment_path = ""
            if attachment:
                # إنشاء مجلد للمرفقات إذا لم يكن موجوداً
                attachments_dir = "attachments"
                if not os.path.exists(attachments_dir):
                    os.makedirs(attachments_dir)

                # نسخ الملف مع تسمية فريدة
                file_ext = os.path.splitext(attachment)[1]
                new_filename = f"{national_id}_{int(datetime.datetime.now().timestamp())}{file_ext}"
                new_path = os.path.join(attachments_dir, new_filename)

                try:
                    shutil.copy2(attachment, new_path)
                    attachment_path = new_path
                except Exception as e:
                    messagebox.showwarning("تنبيه", f"لم يتم نسخ الملف المرفق: {str(e)}")

            try:
                # حفظ المخالفة في قاعدة البيانات
                with self.conn:
                    self.conn.execute("""
                        INSERT INTO student_violations
                        (national_id, violation_date, violation_type, description, 
                         action_taken, action_date, recorded_by, notes, attachment_path,
                         behavior_deduction, custom_action, custom_violation_type)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                    """, (
                        national_id, v_date, v_type, v_desc,
                        a_type, a_date, self.current_user["full_name"], notes, attachment_path,
                        behavior_deduction, custom_action, custom_v_type
                    ))

                messagebox.showinfo("نجاح", "تم تسجيل المخالفة بنجاح")
                violation_window.destroy()

                # تحديث واجهة ملف المتدرب (إعادة فتح الملف)
                parent_window.destroy()
                self.view_student_profile()

            except Exception as e:
                messagebox.showerror("خطأ", f"حدث خطأ أثناء حفظ المخالفة: {str(e)}")

        save_btn = tk.Button(
            button_frame,
            text="حفظ المخالفة",
            font=self.fonts["text_bold"],
            bg=self.colors["success"],
            fg="white",
            padx=15, pady=5,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=save_violation
        )
        save_btn.pack(side=tk.LEFT, padx=5)

        cancel_btn = tk.Button(
            button_frame,
            text="إلغاء",
            font=self.fonts["text_bold"],
            bg=self.colors["danger"],
            fg="white",
            padx=15, pady=5,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=violation_window.destroy
        )
        cancel_btn.pack(side=tk.RIGHT, padx=5)

    def view_violation_details(self, event, tree):
        """عرض تفاصيل المخالفة وإمكانية تعديلها"""
        selected = tree.selection()
        if not selected:
            return

        item_values = tree.item(selected[0], "values")
        if not item_values:
            return

        # استرجاع معرف المخالفة
        violation_date = item_values[0]
        violation_type = item_values[1]

        # الحصول على معرف المخالفة من قاعدة البيانات
        cursor = self.conn.cursor()
        cursor.execute("""
            SELECT id, national_id, violation_date, violation_type, description, 
                   action_taken, action_date, recorded_by, notes, attachment_path
            FROM student_violations
            WHERE violation_date=? AND violation_type=?
            ORDER BY id DESC
            LIMIT 1
        """, (violation_date, violation_type))

        violation = cursor.fetchone()
        if not violation:
            return

        violation_id = violation[0]
        national_id = violation[1]

        # استرجاع اسم المتدرب
        cursor.execute("SELECT name FROM trainees WHERE national_id=?", (national_id,))
        student_name = cursor.fetchone()[0]

        # عرض تفاصيل المخالفة
        details_window = tk.Toplevel(self.root)
        details_window.title(f"تفاصيل المخالفة - {student_name}")
        details_window.geometry("700x600")
        details_window.configure(bg=self.colors["light"])
        details_window.grab_set()

        # توسيط النافذة
        x = (details_window.winfo_screenwidth() - 700) // 2
        y = (details_window.winfo_screenheight() - 600) // 2
        details_window.geometry(f"700x600+{x}+{y}")

        tk.Label(
            details_window,
            text=f"تفاصيل المخالفة - {student_name}",
            font=self.fonts["title"],
            bg=self.colors["primary"],
            fg="white",
            padx=10, pady=10
        ).pack(fill=tk.X)

        details_frame = tk.Frame(details_window, bg=self.colors["light"], padx=20, pady=10)
        details_frame.pack(fill=tk.BOTH, expand=True)

        # عرض التفاصيل
        tk.Label(details_frame, text="نوع المخالفة:", font=self.fonts["text_bold"],
                 bg=self.colors["light"]).grid(row=0, column=1, sticky=tk.E, padx=5, pady=8)
        tk.Label(details_frame, text=violation[3], font=self.fonts["text"],
                 bg=self.colors["light"]).grid(row=0, column=0, sticky=tk.W, padx=5, pady=8)

        tk.Label(details_frame, text="تاريخ المخالفة:", font=self.fonts["text_bold"],
                 bg=self.colors["light"]).grid(row=1, column=1, sticky=tk.E, padx=5, pady=8)
        tk.Label(details_frame, text=violation[2], font=self.fonts["text"],
                 bg=self.colors["light"]).grid(row=1, column=0, sticky=tk.W, padx=5, pady=8)

        tk.Label(details_frame, text="وصف المخالفة:", font=self.fonts["text_bold"],
                 bg=self.colors["light"]).grid(row=2, column=1, sticky=tk.NE, padx=5, pady=8)

        description_text = tk.Text(details_frame, font=self.fonts["text"], height=4, width=40)
        description_text.grid(row=2, column=0, sticky=tk.W, padx=5, pady=8)
        description_text.insert("1.0", violation[4])
        description_text.config(
            state=tk.DISABLED if not self.current_user["permissions"]["can_edit_students"] else tk.NORMAL)

        tk.Label(details_frame, text="الإجراء المتخذ:", font=self.fonts["text_bold"],
                 bg=self.colors["light"]).grid(row=3, column=1, sticky=tk.E, padx=5, pady=8)
        tk.Label(details_frame, text=violation[5], font=self.fonts["text"],
                 bg=self.colors["light"]).grid(row=3, column=0, sticky=tk.W, padx=5, pady=8)

        tk.Label(details_frame, text="تاريخ الإجراء:", font=self.fonts["text_bold"],
                 bg=self.colors["light"]).grid(row=4, column=1, sticky=tk.E, padx=5, pady=8)
        tk.Label(details_frame, text=violation[6], font=self.fonts["text"],
                 bg=self.colors["light"]).grid(row=4, column=0, sticky=tk.W, padx=5, pady=8)

        tk.Label(details_frame, text="المسجل:", font=self.fonts["text_bold"],
                 bg=self.colors["light"]).grid(row=5, column=1, sticky=tk.E, padx=5, pady=8)
        tk.Label(details_frame, text=violation[7], font=self.fonts["text"],
                 bg=self.colors["light"]).grid(row=5, column=0, sticky=tk.W, padx=5, pady=8)

        tk.Label(details_frame, text="ملاحظات:", font=self.fonts["text_bold"],
                 bg=self.colors["light"]).grid(row=6, column=1, sticky=tk.NE, padx=5, pady=8)

        notes_text = tk.Text(details_frame, font=self.fonts["text"], height=3, width=40)
        notes_text.grid(row=6, column=0, sticky=tk.W, padx=5, pady=8)
        notes_text.insert("1.0", violation[8] if violation[8] else "")
        notes_text.config(state=tk.DISABLED if not self.current_user["permissions"]["can_edit_students"] else tk.NORMAL)

        # إذا كان هناك مرفق، إضافة زر لعرضه
        if violation[9]:
            attachment_frame = tk.Frame(details_frame, bg=self.colors["light"])
            attachment_frame.grid(row=7, column=0, columnspan=2, sticky=tk.W, padx=5, pady=8)

            tk.Label(attachment_frame, text="مرفق:", font=self.fonts["text_bold"],
                     bg=self.colors["light"]).pack(side=tk.RIGHT, padx=5)

            def open_attachment():
                try:
                    os.startfile(violation[9])
                except:
                    messagebox.showerror("خطأ", "لا يمكن فتح الملف المرفق")

            view_btn = tk.Button(
                attachment_frame,
                text="عرض المرفق",
                font=self.fonts["text"],
                bg=self.colors["secondary"],
                fg="white",
                padx=5, pady=2,
                bd=0, relief=tk.FLAT,
                cursor="hand2",
                command=open_attachment
            )
            view_btn.pack(side=tk.RIGHT, padx=5)

        # أزرار
        button_frame = tk.Frame(details_window, bg=self.colors["light"], pady=10)
        button_frame.pack(fill=tk.X, padx=20)

        # إذا كان المستخدم لديه صلاحية التعديل، إضافة زر تحديث
        if self.current_user["permissions"]["can_edit_students"]:
            def update_violation():
                try:
                    new_desc = description_text.get("1.0", tk.END).strip()
                    new_notes = notes_text.get("1.0", tk.END).strip()

                    with self.conn:
                        self.conn.execute("""
                            UPDATE student_violations
                            SET description=?, notes=?
                            WHERE id=?
                        """, (new_desc, new_notes, violation_id))

                    messagebox.showinfo("نجاح", "تم تحديث تفاصيل المخالفة بنجاح")
                    details_window.destroy()

                    # تحديث واجهة ملف المتدرب
                    self.view_student_profile()

                except Exception as e:
                    messagebox.showerror("خطأ", f"حدث خطأ أثناء تحديث المخالفة: {str(e)}")

            update_btn = tk.Button(
                button_frame,
                text="تحديث التفاصيل",
                font=self.fonts["text_bold"],
                bg=self.colors["success"],
                fg="white",
                padx=15, pady=5,
                bd=0, relief=tk.FLAT,
                cursor="hand2",
                command=update_violation
            )
            update_btn.pack(side=tk.LEFT, padx=5)

            # إضافة زر حذف المخالفة (للمشرفين فقط)
            if self.current_user["permissions"]["is_admin"]:
                def delete_violation():
                    if messagebox.askyesno("تأكيد الحذف",
                                           "هل أنت متأكد من حذف هذه المخالفة؟\nلا يمكن التراجع عن هذه العملية."):
                        try:
                            with self.conn:
                                self.conn.execute("DELETE FROM student_violations WHERE id=?", (violation_id,))

                            messagebox.showinfo("نجاح", "تم حذف المخالفة بنجاح")
                            details_window.destroy()

                            # تحديث واجهة ملف المتدرب
                            self.view_student_profile()

                        except Exception as e:
                            messagebox.showerror("خطأ", f"حدث خطأ أثناء حذف المخالفة: {str(e)}")

                delete_btn = tk.Button(
                    button_frame,
                    text="حذف المخالفة",
                    font=self.fonts["text_bold"],
                    bg=self.colors["danger"],
                    fg="white",
                    padx=15, pady=5,
                    bd=0, relief=tk.FLAT,
                    cursor="hand2",
                    command=delete_violation
                )
                delete_btn.pack(side=tk.LEFT, padx=5)

        close_btn = tk.Button(
            button_frame,
            text="إغلاق",
            font=self.fonts["text_bold"],
            bg=self.colors["dark"],
            fg="white",
            padx=15, pady=5,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=details_window.destroy
        )
        close_btn.pack(side=tk.RIGHT, padx=5)

        # تعيين مؤشر التركيز على زر الإغلاق
        close_btn.focus_set()

    def export_student_violations_report(self, student_info, violations_records):
        """تصدير تقرير المخالفات مع النوع المخصص"""
        if not self.current_user["permissions"]["can_export_data"]:
            messagebox.showwarning("تنبيه", "ليس لديك صلاحية تصدير البيانات")
            return

        try:
            # التأكد من وجود مكتبة python-docx
            if 'Document' not in globals():
                messagebox.showerror("خطأ",
                                     "لم يتم العثور على مكتبة python-docx. قم بتثبيتها باستخدام: pip install python-docx")
                return

            # استخراج بيانات المتدرب
            nid = student_info[0]
            name = student_info[1]
            rank = student_info[2]
            course = student_info[3]

            # التحقق من وجود مخالفات
            if not violations_records or len(violations_records) == 0:
                messagebox.showinfo("معلومات", "لا توجد مخالفات مسجلة لهذا المتدرب")
                return

            # إنشاء مستند جديد
            doc = Document()

            # إعداد المستند للغة العربية (RTL)
            section = doc.sections[0]
            section.page_width = Inches(8.5)
            section.page_height = Inches(11)
            section.left_margin = Inches(1.0)
            section.right_margin = Inches(1.0)
            section.top_margin = Inches(1.0)
            section.bottom_margin = Inches(1.0)

            # إضافة عنوان المستند
            title = doc.add_heading('تقرير المخالفات والإجراءات التأديبية', level=0)
            title.alignment = WD_ALIGN_PARAGRAPH.CENTER
            for run in title.runs:
                run.font.size = Pt(18)
                run.font.bold = True
                run.font.rtl = True

            # إضافة بيانات المتدرب
            info_para = doc.add_paragraph()
            info_para.alignment = WD_ALIGN_PARAGRAPH.RIGHT
            info_para.add_run("بيانات المتدرب:").bold = True

            info_table = doc.add_table(rows=1, cols=4)
            info_table.style = 'Table Grid'

            # إضافة رؤوس جدول بيانات المتدرب
            header_cells = info_table.rows[0].cells

            # إضافة العناوين بشكل معكوس (RTL)
            header_cells[3].text = "الاسم"
            header_cells[2].text = "الرتبة"
            header_cells[1].text = "رقم الهوية"
            header_cells[0].text = "الدورة"

            # تنسيق الرؤوس
            for cell in header_cells:
                cell.paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER
                for run in cell.paragraphs[0].runs:
                    run.font.bold = True
                    run.font.rtl = True

            # إضافة بيانات المتدرب
            data_cells = info_table.add_row().cells
            data_cells[3].text = name
            data_cells[2].text = rank
            data_cells[1].text = nid
            data_cells[0].text = course

            for cell in data_cells:
                cell.paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER
                for run in cell.paragraphs[0].runs:
                    run.font.rtl = True

            # إضافة فاصل قبل جدول المخالفات
            doc.add_paragraph()

            # عنوان جدول المخالفات
            violations_title = doc.add_paragraph()
            violations_title.alignment = WD_ALIGN_PARAGRAPH.RIGHT
            violations_title.add_run("سجل المخالفات:").bold = True

            # إنشاء جدول المخالفات
            violations_table = doc.add_table(rows=1, cols=6)
            violations_table.style = 'Table Grid'

            # رؤوس الجدول
            v_header_cells = violations_table.rows[0].cells
            v_header_cells[5].text = "تاريخ المخالفة"
            v_header_cells[4].text = "نوع المخالفة"
            v_header_cells[3].text = "الإجراء المتخذ"
            v_header_cells[2].text = "تاريخ الإجراء"
            v_header_cells[1].text = "الخصم"
            v_header_cells[0].text = "وصف المخالفة"

            # تنسيق رؤوس الجدول
            for cell in v_header_cells:
                cell.paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER

                # إضافة تظليل للرأس
                try:
                    shading_elm = parse_xml(r'<w:shd {} w:fill="DDDDDD"/>'.format(nsdecls('w')))
                    cell._element.get_or_add_tcPr().append(shading_elm)
                except:
                    pass

                for run in cell.paragraphs[0].runs:
                    run.font.bold = True
                    run.font.rtl = True

            # إضافة بيانات المخالفات
            cursor = self.conn.cursor()

            for violation in violations_records:
                # الحصول على البيانات الإضافية
                cursor.execute("""
                    SELECT behavior_deduction, custom_action, custom_violation_type 
                    FROM student_violations 
                    WHERE id=?
                """, (violation[0],))
                extra_data = cursor.fetchone()

                behavior_deduction = extra_data[0] if extra_data else 0
                custom_action = extra_data[1] if extra_data else ""
                custom_violation_type = extra_data[2] if extra_data and len(extra_data) > 2 else ""

                row_cells = violations_table.add_row().cells

                row_cells[5].text = violation[1]  # تاريخ المخالفة

                # استخدام النوع المخصص إذا كان النوع "أخرى"
                violation_type_text = custom_violation_type if violation[2] == "أخرى" and custom_violation_type else \
                violation[2]
                row_cells[4].text = violation_type_text  # نوع المخالفة

                # استخدام الإجراء المخصص إذا كان الإجراء "أخرى"
                action_text = custom_action if violation[4] == "أخرى" and custom_action else violation[4]
                row_cells[3].text = action_text  # الإجراء المتخذ

                row_cells[2].text = violation[5]  # تاريخ الإجراء
                row_cells[1].text = f"{behavior_deduction} درجة"  # الخصم
                row_cells[0].text = violation[3]  # وصف المخالفة

                # تنسيق الخلايا
                for i, cell in enumerate(row_cells):
                    alignment = WD_ALIGN_PARAGRAPH.CENTER

                    # جعل خلية الوصف محاذاة يمين
                    if i == 0:
                        alignment = WD_ALIGN_PARAGRAPH.RIGHT

                    cell.paragraphs[0].alignment = alignment
                    for run in cell.paragraphs[0].runs:
                        run.font.rtl = True

            # إضافة بيانات كل مخالفة بالتفصيل في صفحات منفصلة
            for i, violation in enumerate(violations_records):
                # إضافة صفحة جديدة
                doc.add_page_break()

                # عنوان المخالفة
                v_title = doc.add_heading(f'تفاصيل المخالفة رقم {i + 1}', level=1)
                v_title.alignment = WD_ALIGN_PARAGRAPH.CENTER
                for run in v_title.runs:
                    run.font.rtl = True

                # الحصول على البيانات الإضافية
                cursor.execute("""
                    SELECT behavior_deduction, custom_action, custom_violation_type 
                    FROM student_violations 
                    WHERE id=?
                """, (violation[0],))
                extra_data = cursor.fetchone()

                behavior_deduction = extra_data[0] if extra_data else 0
                custom_action = extra_data[1] if extra_data else ""
                custom_violation_type = extra_data[2] if extra_data and len(extra_data) > 2 else ""

                # تفاصيل المخالفة
                details_table = doc.add_table(rows=8, cols=2)
                details_table.style = 'Table Grid'

                # إضافة البيانات
                details_table.cell(0, 1).text = "نوع المخالفة"
                violation_type_text = custom_violation_type if violation[2] == "أخرى" and custom_violation_type else \
                violation[2]
                details_table.cell(0, 0).text = violation_type_text

                details_table.cell(1, 1).text = "تاريخ المخالفة"
                details_table.cell(1, 0).text = violation[1]

                details_table.cell(2, 1).text = "وصف المخالفة"
                details_table.cell(2, 0).text = violation[3]

                details_table.cell(3, 1).text = "الإجراء المتخذ"
                action_text = custom_action if violation[4] == "أخرى" and custom_action else violation[4]
                details_table.cell(3, 0).text = action_text

                details_table.cell(4, 1).text = "تاريخ الإجراء"
                details_table.cell(4, 0).text = violation[5]

                details_table.cell(5, 1).text = "درجات الخصم من السلوك"
                details_table.cell(5, 0).text = f"{behavior_deduction} درجة"

                details_table.cell(6, 1).text = "المسجل"
                details_table.cell(6, 0).text = violation[6]

                details_table.cell(7, 1).text = "ملاحظات"
                details_table.cell(7, 0).text = violation[7] if violation[7] else "لا توجد ملاحظات"

                # تنسيق الجدول
                for row in details_table.rows:
                    # خلية العنوان
                    row.cells[1].paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER
                    for run in row.cells[1].paragraphs[0].runs:
                        run.font.bold = True
                        run.font.rtl = True

                    # تطبيق تظليل على خلايا العناوين
                    try:
                        shading_elm = parse_xml(r'<w:shd {} w:fill="E9E9E9"/>'.format(nsdecls('w')))
                        row.cells[1]._element.get_or_add_tcPr().append(shading_elm)
                    except:
                        pass

                    # خلية المحتوى
                    row.cells[0].paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.RIGHT
                    for run in row.cells[0].paragraphs[0].runs:
                        run.font.rtl = True

            # إضافة ملخص الخصومات
            doc.add_paragraph()

            # حساب إجمالي الخصومات
            cursor.execute("""
                SELECT SUM(behavior_deduction)
                FROM student_violations
                WHERE national_id=? AND behavior_deduction > 0
            """, (nid,))
            total_deduction = cursor.fetchone()[0] or 0

            summary_para = doc.add_paragraph()
            summary_para.alignment = WD_ALIGN_PARAGRAPH.RIGHT
            summary_text = f"إجمالي الخصم من درجة السلوك: {total_deduction} درجة"
            summary_run = summary_para.add_run(summary_text)
            summary_run.font.bold = True
            summary_run.font.rtl = True
            summary_run.font.size = Pt(14)
            summary_run.font.color.rgb = RGBColor(255, 0, 0)  # لون أحمر

            # إضافة تذييل بتاريخ الطباعة
            doc.add_paragraph()
            footer_para = doc.add_paragraph()
            footer_para.alignment = WD_ALIGN_PARAGRAPH.LEFT
            today_date = datetime.datetime.now().strftime("%Y-%m-%d")
            footer_text = footer_para.add_run(
                f"تاريخ الطباعة: {today_date} - طُبع بواسطة: {self.current_user['full_name']}")
            footer_text.font.size = Pt(9)
            footer_text.font.rtl = True

            # حفظ المستند
            export_file = filedialog.asksaveasfilename(
                defaultextension=".docx",
                filetypes=[("Word documents", "*.docx")],
                initialfile=f"تقرير_مخالفات_{name}_{nid}.docx"
            )

            if export_file:
                doc.save(export_file)
                messagebox.showinfo("نجاح", f"تم تصدير تقرير المخالفات بنجاح إلى:\n{export_file}")

                # محاولة فتح الملف
                try:
                    os.startfile(export_file)
                except:
                    pass

        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء تصدير تقرير المخالفات: {str(e)}")

    def toggle_student_exclusion(self, national_id, exclude, profile_window=None):
        """إضافة أو إزالة استبعاد المتدرب"""
        if not self.current_user["permissions"]["can_edit_students"]:
            messagebox.showwarning("تنبيه", "ليس لديك صلاحية استبعاد المتدربين")
            return

        cursor = self.conn.cursor()
        cursor.execute("SELECT name, is_excluded FROM trainees WHERE national_id=?", (national_id,))
        student = cursor.fetchone()

        if not student:
            messagebox.showwarning("تنبيه", "لم يتم العثور على المتدرب")
            return

        student_name, current_excluded = student

        if exclude and current_excluded == 1:
            messagebox.showinfo("تنبيه", "هذا المتدرب مستبعد بالفعل")
            return

        if not exclude and current_excluded == 0:
            messagebox.showinfo("تنبيه", "هذا المتدرب غير مستبعد بالفعل")
            return

        if exclude:
            # إنشاء نافذة اختيار سبب الاستبعاد
            reason_window = tk.Toplevel(self.root)
            reason_window.title("سبب الاستبعاد")
            reason_window.geometry("400x300")
            reason_window.configure(bg=self.colors["light"])
            reason_window.transient(self.root)
            reason_window.grab_set()

            # توسيط النافذة
            x = (reason_window.winfo_screenwidth() - 400) // 2
            y = (reason_window.winfo_screenheight() - 300) // 2
            reason_window.geometry(f"400x300+{x}+{y}")

            # عنوان النافذة
            tk.Label(
                reason_window,
                text=f"اختر سبب استبعاد {student_name}",
                font=self.fonts["title"],
                bg=self.colors["primary"],
                fg="white",
                padx=10, pady=10
            ).pack(fill=tk.X)

            # إطار الخيارات
            options_frame = tk.Frame(reason_window, bg=self.colors["light"], padx=20, pady=20)
            options_frame.pack(fill=tk.BOTH, expand=True)

            # متغير لتخزين الخيار المحدد
            selected_reason = tk.StringVar(value="عدم مباشرة الدورة")

            # الخيارات الثلاثة
            reasons = [
                ("عدم مباشرة الدورة", "عدم مباشرة الدورة"),
                ("إلغاء دورة", "إلغاء دورة"),
                ("أخرى", "other")
            ]

            for text, value in reasons:
                tk.Radiobutton(
                    options_frame,
                    text=text,
                    variable=selected_reason,
                    value=value,
                    font=self.fonts["text_bold"],
                    bg=self.colors["light"],
                    activebackground=self.colors["light"]
                ).pack(anchor=tk.W, pady=5)

            # إطار لإدخال السبب المخصص
            custom_reason_frame = tk.Frame(options_frame, bg=self.colors["light"])
            custom_reason_label = tk.Label(
                custom_reason_frame,
                text="أدخل السبب:",
                font=self.fonts["text"],
                bg=self.colors["light"]
            )
            custom_reason_entry = tk.Entry(
                custom_reason_frame,
                font=self.fonts["text"],
                width=30
            )

            def toggle_custom_reason(*args):
                """إظهار/إخفاء حقل السبب المخصص"""
                if selected_reason.get() == "other":
                    custom_reason_frame.pack(fill=tk.X, pady=10)
                    custom_reason_label.pack(anchor=tk.W)
                    custom_reason_entry.pack(fill=tk.X, pady=5)
                    custom_reason_entry.focus_set()
                else:
                    custom_reason_frame.pack_forget()

            # ربط تغيير الخيار بدالة إظهار/إخفاء السبب المخصص
            selected_reason.trace("w", toggle_custom_reason)

            # أزرار الإجراءات
            buttons_frame = tk.Frame(reason_window, bg=self.colors["light"], pady=10)
            buttons_frame.pack(fill=tk.X, padx=20)

            def confirm_exclusion():
                """تأكيد الاستبعاد"""
                # الحصول على السبب النهائي
                if selected_reason.get() == "other":
                    exclusion_reason = custom_reason_entry.get().strip()
                    if not exclusion_reason:
                        messagebox.showwarning("تنبيه", "الرجاء إدخال سبب الاستبعاد")
                        return
                else:
                    exclusion_reason = selected_reason.get()

                # إغلاق نافذة السبب
                reason_window.destroy()

                current_date = datetime.datetime.now().strftime("%Y-%m-%d")

                try:
                    with self.conn:
                        self.conn.execute("""
                            UPDATE trainees 
                            SET is_excluded=1, exclusion_reason=?, excluded_date=? 
                            WHERE national_id=?
                        """, (exclusion_reason, current_date, national_id))

                    messagebox.showinfo("نجاح", f"تم استبعاد المتدرب {student_name} بنجاح")

                    # تحديث الإحصائيات والبيانات
                    self.update_students_tree()
                    self.update_statistics()
                    self.update_attendance_display()

                    # إغلاق نافذة ملف المتدرب إذا كانت مفتوحة وإعادة فتحها لتعكس التغييرات
                    if profile_window:
                        profile_window.destroy()
                        self.view_student_profile()

                except Exception as e:
                    messagebox.showerror("خطأ", f"حدث خطأ أثناء استبعاد المتدرب: {str(e)}")

            confirm_btn = tk.Button(
                buttons_frame,
                text="تأكيد",
                font=self.fonts["text_bold"],
                bg=self.colors["success"],
                fg="white",
                padx=15, pady=5,
                bd=0, relief=tk.FLAT,
                cursor="hand2",
                command=confirm_exclusion
            )
            confirm_btn.pack(side=tk.LEFT, padx=5)

            cancel_btn = tk.Button(
                buttons_frame,
                text="إلغاء",
                font=self.fonts["text_bold"],
                bg=self.colors["danger"],
                fg="white",
                padx=15, pady=5,
                bd=0, relief=tk.FLAT,
                cursor="hand2",
                command=reason_window.destroy
            )
            cancel_btn.pack(side=tk.RIGHT, padx=5)

        else:
            # إلغاء الاستبعاد
            try:
                with self.conn:
                    self.conn.execute("""
                        UPDATE trainees 
                        SET is_excluded=0, exclusion_reason='', excluded_date='' 
                        WHERE national_id=?
                    """, (national_id,))

                messagebox.showinfo("نجاح", f"تم إلغاء استبعاد المتدرب {student_name} بنجاح")
            except Exception as e:
                messagebox.showerror("خطأ", f"حدث خطأ أثناء إلغاء استبعاد المتدرب: {str(e)}")
                return

            # تحديث الإحصائيات والبيانات
            self.update_students_tree()
            self.update_statistics()
            self.update_attendance_display()

            # إغلاق نافذة ملف المتدرب إذا كانت مفتوحة وإعادة فتحها لتعكس التغييرات
            if profile_window:
                profile_window.destroy()
                self.view_student_profile()

    def export_student_to_word(self, student_info, attendance_records):
    """
    تصدير بيانات المتدرب الشاملة إلى ملف Word بتصميم احترافي وخطوط واضحة
    """
    try:
        # التأكد من وجود مكتبة python-docx
        from docx import Document
        from docx.shared import Pt, Inches, RGBColor
        from docx.enum.text import WD_ALIGN_PARAGRAPH
        from docx.enum.table import WD_TABLE_ALIGNMENT
        from docx.oxml.ns import nsdecls
        from docx.oxml import parse_xml
        
        # استخراج المعلومات من البيانات
        nid = student_info[0]
        name = student_info[1]
        rank = student_info[2]
        course = student_info[3]
        phone = student_info[4]
        is_excluded = student_info[5]
        exclusion_reason = student_info[6] if is_excluded == 1 else ""
        excluded_date = student_info[7] if is_excluded == 1 else ""

        # إنشاء مستند جديد
        doc = Document()

        # إعداد المستند
        section = doc.sections[0]
        section.page_width = Inches(8.5)
        section.page_height = Inches(11)
        section.left_margin = Inches(0.5)
        section.right_margin = Inches(0.5)
        section.top_margin = Inches(0.5)
        section.bottom_margin = Inches(0.5)

        # ============= رأس التقرير =============
        # إضافة شعار أو خط زخرفي
        header_line = doc.add_paragraph("━" * 50)
        header_line.alignment = WD_ALIGN_PARAGRAPH.CENTER
        
        # العنوان الرئيسي
        main_title = doc.add_paragraph()
        main_title.alignment = WD_ALIGN_PARAGRAPH.CENTER
        title_run = main_title.add_run('التقرير الشامل لبيانات المتدرب')
        title_run.font.size = Pt(36)
        title_run.font.bold = True
        title_run.font.name = 'Arial'
        title_run.font.color.rgb = RGBColor(0, 0, 128)  # أزرق داكن

        # العنوان الفرعي
        subtitle = doc.add_paragraph()
        subtitle.alignment = WD_ALIGN_PARAGRAPH.CENTER
        subtitle_run = subtitle.add_run(f'الدورة: {course}')
        subtitle_run.font.size = Pt(24)
        subtitle_run.font.bold = True
        subtitle_run.font.name = 'Arial'
        subtitle_run.font.color.rgb = RGBColor(64, 64, 64)

        # التاريخ
        date_para = doc.add_paragraph()
        date_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
        current_date = datetime.datetime.now().strftime("%Y-%m-%d")
        date_run = date_para.add_run(f'تاريخ التقرير: {current_date}')
        date_run.font.size = Pt(16)
        date_run.font.name = 'Arial'
        date_run.font.color.rgb = RGBColor(128, 128, 128)

        doc.add_paragraph("━" * 50).alignment = WD_ALIGN_PARAGRAPH.CENTER
        doc.add_paragraph()

        # ============= معلومات المتدرب الأساسية =============
        # عنوان القسم
        section1_title = doc.add_paragraph()
        section1_title.alignment = WD_ALIGN_PARAGRAPH.CENTER
        s1_run = section1_title.add_run('【 بيانات المتدرب الأساسية 】')
        s1_run.font.size = Pt(28)
        s1_run.font.bold = True
        s1_run.font.name = 'Arial'
        s1_run.font.color.rgb = RGBColor(0, 100, 0)  # أخضر داكن

        doc.add_paragraph()

        # جدول المعلومات الأساسية بتصميم محسن
        info_table = doc.add_table(rows=8 if is_excluded == 1 else 6, cols=2)
        info_table.style = 'Table Grid'
        info_table.alignment = WD_TABLE_ALIGNMENT.CENTER

        # البيانات
        info_data = [
            ("الاسم الكامل", name),
            ("رقم الهوية", nid),
            ("الرتبة", rank),
            ("اسم الدورة", course),
            ("رقم الجوال", phone),
            ("حالة المتدرب", "❌ مستبعد" if is_excluded == 1 else "✅ نشط")
        ]

        if is_excluded == 1:
            info_data.extend([
                ("سبب الاستبعاد", exclusion_reason),
                ("تاريخ الاستبعاد", excluded_date)
            ])

        # ملء الجدول
        for i, (label, value) in enumerate(info_data):
            row = info_table.rows[i]
            
            # خلية التسمية
            label_cell = row.cells[1]
            label_cell.text = label
            label_para = label_cell.paragraphs[0]
            label_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
            label_run = label_para.runs[0] if label_para.runs else label_para.add_run(label)
            label_run.font.size = Pt(18)
            label_run.font.bold = True
            label_run.font.name = 'Arial'
            
            # تلوين خلية التسمية
            shading_elm1 = parse_xml(r'<w:shd {} w:fill="4472C4"/>'.format(nsdecls('w')))
            label_cell._element.get_or_add_tcPr().append(shading_elm1)
            label_run.font.color.rgb = RGBColor(255, 255, 255)  # نص أبيض
            
            # خلية القيمة
            value_cell = row.cells[0]
            value_cell.text = value
            value_para = value_cell.paragraphs[0]
            value_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
            value_run = value_para.runs[0] if value_para.runs else value_para.add_run(value)
            value_run.font.size = Pt(20)
            value_run.font.bold = True
            value_run.font.name = 'Arial'
            
            # تلوين خلية القيمة
            if i == 5 and is_excluded == 1:  # حالة مستبعد
                value_run.font.color.rgb = RGBColor(255, 0, 0)
            
            # حجم الخلايا
            row.height = Inches(0.6)

        # عرض الأعمدة
        for row in info_table.rows:
            row.cells[0].width = Inches(4)
            row.cells[1].width = Inches(2.5)

        # ============= ملخص الإحصائيات =============
        doc.add_page_break()
        
        # عنوان القسم
        stats_title = doc.add_paragraph()
        stats_title.alignment = WD_ALIGN_PARAGRAPH.CENTER
        st_run = stats_title.add_run('【 ملخص إحصائيات الحضور والغياب 】')
        st_run.font.size = Pt(28)
        st_run.font.bold = True
        st_run.font.name = 'Arial'
        st_run.font.color.rgb = RGBColor(128, 0, 128)  # بنفسجي

        doc.add_paragraph()

        # حساب الإحصائيات
        cursor = self.conn.cursor()
        cursor.execute("""
            SELECT 
                COUNT(CASE WHEN status = 'حاضر' THEN 1 END) as present,
                COUNT(CASE WHEN status = 'غائب' THEN 1 END) as absent,
                COUNT(CASE WHEN status = 'متأخر' THEN 1 END) as late,
                COUNT(CASE WHEN status = 'غائب بعذر' THEN 1 END) as excused,
                COUNT(CASE WHEN status = 'لم يباشر' THEN 1 END) as not_started,
                COUNT(CASE WHEN status = 'تطبيق ميداني' THEN 1 END) as field_app,
                COUNT(CASE WHEN status = 'يوم طالب' THEN 1 END) as student_day,
                COUNT(CASE WHEN status = 'مسائية / عن بعد' THEN 1 END) as evening,
                COUNT(CASE WHEN status = 'حالة وفاة' THEN 1 END) as death,
                COUNT(CASE WHEN status = 'منوم' THEN 1 END) as hospital,
                COUNT(*) as total
            FROM attendance
            WHERE national_id=?
        """, (nid,))
        
        stats = cursor.fetchone()

        # إنشاء بطاقات الإحصائيات
        stats_data = [
            ("✅ الحضور", stats[0], "34A853"),
            ("❌ الغياب", stats[1], "EA4335"),
            ("⏰ التأخير", stats[2], "FBBC05"),
            ("📝 غياب بعذر", stats[3], "4285F4"),
            ("⏳ لم يباشر", stats[4], "FFA500"),
            ("🏭 تطبيق ميداني", stats[5], "909090"),
            ("👨‍🎓 يوم طالب", stats[6], "A9A9A9"),
            ("🌙 مسائية/عن بعد", stats[7], "A0A0A0"),
            ("💔 حالة وفاة", stats[8], "7E57C2"),
            ("🏥 منوم", stats[9], "26A69A")
        ]

        # جدول الإحصائيات
        stats_table = doc.add_table(rows=5, cols=4)
        stats_table.alignment = WD_TABLE_ALIGNMENT.CENTER
        
        # ملء الإحصائيات
        stat_idx = 0
        for row in stats_table.rows:
            for col_idx in range(0, 4, 2):
                if stat_idx < len(stats_data):
                    stat_name, stat_value, color = stats_data[stat_idx]
                    
                    # خلية الاسم
                    name_cell = row.cells[col_idx + 1]
                    name_cell.text = stat_name
                    name_para = name_cell.paragraphs[0]
                    name_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
                    name_run = name_para.runs[0] if name_para.runs else name_para.add_run(stat_name)
                    name_run.font.size = Pt(18)
                    name_run.font.bold = True
                    name_run.font.name = 'Arial'
                    
                    # خلية القيمة
                    value_cell = row.cells[col_idx]
                    value_cell.text = str(stat_value)
                    value_para = value_cell.paragraphs[0]
                    value_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
                    value_run = value_para.runs[0] if value_para.runs else value_para.add_run(str(stat_value))
                    value_run.font.size = Pt(24)
                    value_run.font.bold = True
                    value_run.font.name = 'Arial'
                    
                    stat_idx += 1
            
            row.height = Inches(0.8)

        # إجمالي الأيام
        total_para = doc.add_paragraph()
        total_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
        total_run = total_para.add_run(f'إجمالي الأيام المسجلة: {stats[10]} يوم')
        total_run.font.size = Pt(22)
        total_run.font.bold = True
        total_run.font.name = 'Arial'
        total_run.font.color.rgb = RGBColor(0, 0, 255)

        # ============= تفاصيل سجلات الحضور =============
        doc.add_page_break()

        # عنوان القسم
        details_title = doc.add_paragraph()
        details_title.alignment = WD_ALIGN_PARAGRAPH.CENTER
        dt_run = details_title.add_run('【 تفاصيل سجلات الحضور والغياب 】')
        dt_run.font.size = Pt(28)
        dt_run.font.bold = True
        dt_run.font.name = 'Arial'
        dt_run.font.color.rgb = RGBColor(255, 0, 0)

        # تصنيف السجلات
        status_categories = {
            'حاضر': ('✅', '34A853'),
            'غائب': ('❌', 'EA4335'),
            'متأخر': ('⏰', 'FBBC05'),
            'غائب بعذر': ('📝', '4285F4'),
            'لم يباشر': ('⏳', 'FFA500'),
            'تطبيق ميداني': ('🏭', '909090'),
            'يوم طالب': ('👨‍🎓', 'A9A9A9'),
            'مسائية / عن بعد': ('🌙', 'A0A0A0'),
            'حالة وفاة': ('💔', '7E57C2'),
            'منوم': ('🏥', '26A69A')
        }

        # ترتيب السجلات حسب التاريخ
        records_by_status = {status: [] for status in status_categories}
        for record in sorted(attendance_records, key=lambda x: x[6]):
            status = record[7]
            if status in records_by_status:
                records_by_status[status].append(record)

        # إنشاء جدول لكل حالة
        for status, records in records_by_status.items():
            if records:
                doc.add_paragraph()
                
                # عنوان الحالة
                icon, color = status_categories[status]
                status_heading = doc.add_paragraph()
                status_heading.alignment = WD_ALIGN_PARAGRAPH.CENTER
                sh_run = status_heading.add_run(f'{icon} {status} - عدد الأيام: {len(records)}')
                sh_run.font.size = Pt(22)
                sh_run.font.bold = True
                sh_run.font.name = 'Arial'

                # الجدول
                has_reason = status in ['غائب بعذر', 'حالة وفاة', 'منوم']
                cols = 6 if has_reason else 5
                detail_table = doc.add_table(rows=1, cols=cols)
                detail_table.style = 'Table Grid'
                detail_table.alignment = WD_TABLE_ALIGNMENT.CENTER

                # رؤوس الأعمدة
                headers = ['م', 'التاريخ', 'اليوم', 'الوقت']
                if has_reason:
                    headers.append('السبب/التفاصيل')
                headers.append('المسجل')

                header_row = detail_table.rows[0]
                for i, header in enumerate(reversed(headers)):
                    cell = header_row.cells[i]
                    cell.text = header
                    para = cell.paragraphs[0]
                    para.alignment = WD_ALIGN_PARAGRAPH.CENTER
                    run = para.runs[0] if para.runs else para.add_run(header)
                    run.font.bold = True
                    run.font.size = Pt(16)
                    run.font.name = 'Arial'
                    run.font.color.rgb = RGBColor(255, 255, 255)
                    
                    # تلوين الرأس
                    shading = parse_xml(f'<w:shd {nsdecls("w")} w:fill="{color}"/>')
                    cell._element.get_or_add_tcPr().append(shading)

                # البيانات
                for idx, record in enumerate(records):
                    row = detail_table.add_row()
                    cells = row.cells
                    
                    # رقم التسلسل
                    cells[-1].text = str(idx + 1)
                    
                    # التاريخ
                    date_obj = datetime.datetime.strptime(record[6], "%Y-%m-%d")
                    cells[-2].text = date_obj.strftime("%Y/%m/%d")
                    
                    # اليوم
                    weekdays = ['الإثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت', 'الأحد']
                    cells[-3].text = weekdays[date_obj.weekday()]
                    
                    # الوقت
                    cells[-4].text = record[5]
                    
                    # السبب (إن وجد)
                    if has_reason:
                        cells[1].text = record[10] if record[10] else "غير محدد"
                    
                    # المسجل
                    cells[0].text = record[9]

                    # تنسيق الخلايا
                    for cell in cells:
                        para = cell.paragraphs[0]
                        para.alignment = WD_ALIGN_PARAGRAPH.CENTER
                        if para.runs:
                            run = para.runs[0]
                        else:
                            run = para.add_run(cell.text)
                        run.font.size = Pt(14)
                        run.font.bold = True
                        run.font.name = 'Arial'
                    
                    row.height = Inches(0.5)

        # ============= المخالفات والإجراءات التأديبية =============
        cursor.execute("""
            SELECT id, violation_date, violation_type, description, 
                   action_taken, action_date, recorded_by, notes,
                   behavior_deduction, custom_action, custom_violation_type
            FROM student_violations
            WHERE national_id=?
            ORDER BY violation_date DESC
        """, (nid,))
        violations_records = cursor.fetchall()

        if violations_records:
            doc.add_page_break()

            # عنوان القسم
            v_title = doc.add_paragraph()
            v_title.alignment = WD_ALIGN_PARAGRAPH.CENTER
            vt_run = v_title.add_run('【 المخالفات والإجراءات التأديبية 】')
            vt_run.font.size = Pt(28)
            vt_run.font.bold = True
            vt_run.font.name = 'Arial'
            vt_run.font.color.rgb = RGBColor(255, 0, 0)

            # الإحصائيات
            total_violations = len(violations_records)
            total_deduction = sum(rec[8] or 0 for rec in violations_records)

            stats_para = doc.add_paragraph()
            stats_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
            sp_run = stats_para.add_run(
                f'📊 إجمالي المخالفات: {total_violations} | '
                f'إجمالي الخصم: {total_deduction} درجة'
            )
            sp_run.font.size = Pt(20)
            sp_run.font.bold = True
            sp_run.font.name = 'Arial'

            doc.add_paragraph()

            # جدول المخالفات
            v_table = doc.add_table(rows=1, cols=7)
            v_table.style = 'Table Grid'
            v_table.alignment = WD_TABLE_ALIGNMENT.CENTER

            # رؤوس الجدول
            v_headers = ['م', 'التاريخ', 'نوع المخالفة', 'الوصف', 'الإجراء', 'تاريخ الإجراء', 'الخصم']
            v_header_row = v_table.rows[0]
            
            for i, header in enumerate(reversed(v_headers)):
                cell = v_header_row.cells[i]
                cell.text = header
                para = cell.paragraphs[0]
                para.alignment = WD_ALIGN_PARAGRAPH.CENTER
                run = para.runs[0] if para.runs else para.add_run(header)
                run.font.bold = True
                run.font.size = Pt(16)
                run.font.name = 'Arial'
                run.font.color.rgb = RGBColor(255, 255, 255)
                
                shading = parse_xml(r'<w:shd {} w:fill="8B0000"/>'.format(nsdecls('w')))
                cell._element.get_or_add_tcPr().append(shading)

            # البيانات
            for idx, violation in enumerate(violations_records):
                row = v_table.add_row()
                cells = row.cells
                
                cells[6].text = str(idx + 1)
                cells[5].text = violation[1]
                
                # نوع المخالفة
                v_type = violation[10] if violation[2] == "أخرى" and violation[10] else violation[2]
                cells[4].text = v_type
                
                cells[3].text = violation[3] if violation[3] else "---"
                
                # الإجراء
                action = violation[9] if violation[4] == "أخرى" and violation[9] else violation[4]
                cells[2].text = action
                
                cells[1].text = violation[5]
                cells[0].text = f"{violation[8] or 0} درجة"

                # تنسيق
                for cell in cells:
                    para = cell.paragraphs[0]
                    para.alignment = WD_ALIGN_PARAGRAPH.CENTER
                    if para.runs:
                        run = para.runs[0]
                    else:
                        run = para.add_run(cell.text)
                    run.font.size = Pt(14)
                    run.font.bold = True
                    run.font.name = 'Arial'
                
                row.height = Inches(0.6)

        # ============= التوقيعات =============
        doc.add_page_break()

        # خط زخرفي
        doc.add_paragraph("━" * 50).alignment = WD_ALIGN_PARAGRAPH.CENTER
        
        # النظام
        system_para = doc.add_paragraph()
        system_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
        sys_run = system_para.add_run("نظام إدارة الحضور والغياب الإلكتروني")
        sys_run.font.size = Pt(20)
        sys_run.font.bold = True
        sys_run.font.name = 'Arial'

        # مساحة للتوقيع
        for _ in range(6):
            doc.add_paragraph()

        # المستخدم
        user_para = doc.add_paragraph()
        user_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
        user_run = user_para.add_run(f"المستخدم: {self.current_user['full_name']}")
        user_run.font.size = Pt(18)
        user_run.font.bold = True
        user_run.font.name = 'Arial'

        # التوقيع
        sig_para = doc.add_paragraph()
        sig_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
        sig_run = sig_para.add_run("التوقيع: ___________________________")
        sig_run.font.size = Pt(16)
        sig_run.font.name = 'Arial'

        # التاريخ والوقت
        dt_para = doc.add_paragraph()
        dt_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
        now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M")
        dt_run = dt_para.add_run(f"التاريخ والوقت: {now}")
        dt_run.font.size = Pt(14)
        dt_run.font.name = 'Arial'

        # خط زخرفي نهائي
        doc.add_paragraph("━" * 50).alignment = WD_ALIGN_PARAGRAPH.CENTER

        # حفظ المستند
        export_file = filedialog.asksaveasfilename(
            defaultextension=".docx",
            filetypes=[("Word documents", "*.docx")],
            initialfile=f"تقرير_شامل_{name}_{nid}.docx"
        )

        if export_file:
            doc.save(export_file)
            messagebox.showinfo("نجاح", f"تم تصدير التقرير الشامل بنجاح")

            # محاولة فتح الملف
            try:
                os.startfile(export_file)
            except:
                pass

    except Exception as e:
        messagebox.showerror("خطأ", f"حدث خطأ أثناء تصدير البيانات: {str(e)}")
        

    def update_statistics(self):
        cursor = self.conn.cursor()
        # احتساب عدد المتدربين غير المستبعدين فقط
        cursor.execute("SELECT COUNT(*) FROM trainees WHERE is_excluded=0")
        total_students = cursor.fetchone()[0]
        self.total_students_var.set(str(total_students))

        date_str = self.date_entry.get_date().strftime("%Y-%m-%d")

        # استعلام محسّن: استخدام GROUP BY والدالة المجمعة COUNT مع CASE
        cursor.execute("""
            SELECT 
                COALESCE(SUM(CASE WHEN a.status = 'حاضر' THEN 1 ELSE 0 END), 0) as present_count,
                COALESCE(SUM(CASE WHEN a.status = 'غائب' THEN 1 ELSE 0 END), 0) as absent_count,
                COALESCE(SUM(CASE WHEN a.status = 'متأخر' THEN 1 ELSE 0 END), 0) as late_count,
                COALESCE(SUM(CASE WHEN a.status = 'غائب بعذر' THEN 1 ELSE 0 END), 0) as excused_count,
                COALESCE(SUM(CASE WHEN a.status = 'لم يباشر' THEN 1 ELSE 0 END), 0) as not_started_count,
                COALESCE(SUM(CASE WHEN a.status = 'تطبيق ميداني' THEN 1 ELSE 0 END), 0) as field_app_count,
                COALESCE(SUM(CASE WHEN a.status = 'يوم طالب' THEN 1 ELSE 0 END), 0) as student_day_count,
                COALESCE(SUM(CASE WHEN a.status = 'مسائية / عن بعد' THEN 1 ELSE 0 END), 0) as evening_remote_count,
                COALESCE(SUM(CASE WHEN a.status = 'حالة وفاة' THEN 1 ELSE 0 END), 0) as death_case_count,
                COALESCE(SUM(CASE WHEN a.status = 'منوم' THEN 1 ELSE 0 END), 0) as hospital_count
            FROM attendance a
            JOIN trainees t ON a.national_id = t.national_id
            WHERE a.date=? AND t.is_excluded=0
        """, (date_str,))

        result = cursor.fetchone()

        # تحديث متغيرات العرض
        self.present_students_var.set(str(result[0]))
        self.absent_students_var.set(str(result[1]))
        self.late_students_var.set(str(result[2]))
        self.excused_students_var.set(str(result[3]))
        self.not_started_students_var.set(str(result[4]))
        self.field_application_var.set(str(result[5]))
        self.student_day_var.set(str(result[6]))
        self.evening_remote_var.set(str(result[7]))
        self.death_case_var.set(str(result[8]))
        self.hospital_var.set(str(result[9]))

        # حساب نسبة الحضور
        if total_students > 0:
            # إضافة الحالات الجديدة لحساب نسبة الحضور
            attendance_rate = ((result[0] + result[2] + result[5] + result[6] + result[7]) / total_students) * 100
        else:
            attendance_rate = 0.0

        self.attendance_rate_var.set(f"{attendance_rate:.2f}%")

    def check_student_absence(self, national_id, current_date):
        """
        فحص حالة غياب المتدرب ورصد الغياب المتكرر
        يتم استدعاء هذه الدالة عند تسجيل غياب جديد للمتدرب

        المدخلات:
            national_id: رقم هوية المتدرب
            current_date: تاريخ اليوم الحالي بتنسيق YYYY-MM-DD

        المخرجات:
            tuple(bool, str): الأول يشير إلى وجود غياب متكرر، والثاني هو نص رسالة التنبيه
        """
        cursor = self.conn.cursor()

        # الحصول على معلومات المتدرب
        cursor.execute("""
            SELECT name, rank, course 
            FROM trainees 
            WHERE national_id=?
        """, (national_id,))

        student_info = cursor.fetchone()
        if not student_info:
            return False, ""

        student_name, student_rank, student_course = student_info

        # تحويل التاريخ الحالي إلى كائن تاريخ
        current_date_obj = datetime.datetime.strptime(current_date, "%Y-%m-%d").date()

        # الحصول على تواريخ حضور المتدرب في الأيام السابقة (دون اليوم الحالي)
        cursor.execute("""
            SELECT date, status 
            FROM attendance 
            WHERE national_id=? AND date < ? 
            ORDER BY date DESC
        """, (national_id, current_date))

        attendance_records = cursor.fetchall()

        # حساب عدد أيام الغياب المتتالية
        consecutive_absences = 0

        # حساب عدد أيام الغياب الإجمالية
        total_absences = 0

        # التحقق أولاً ما إذا كان اليوم المسجل هو "غائب"
        consecutive_absences = 1  # اليوم الحالي محسوب كغياب (لأننا ندعو هذه الدالة فقط عند تسجيل غياب)
        total_absences = 1

        # معالجة سجلات الحضور السابقة
        last_date = current_date_obj
        for record in attendance_records:
            date_str, status = record
            record_date = datetime.datetime.strptime(date_str, "%Y-%m-%d").date()

            # حساب إجمالي الغياب (غائب وغائب بعذر يُحسبان كغياب للإجمالي)
            if status in ["غائب", "غائب بعذر"]:
                total_absences += 1

                # التحقق من التتابع - يجب أن يكون الفرق يوم واحد للاعتبار متتاليًا
                if (last_date - record_date).days == 1 and status == "غائب":
                    consecutive_absences += 1
                else:
                    # إذا كان هناك انقطاع في التتابع، نتوقف عن العد
                    if status != "غائب":  # إذا كان "غائب بعذر" لا يُحسب في التتابع
                        continue
            else:
                # إذا كان المتدرب حاضرًا أو حالة أخرى، نتوقف عن عد الأيام المتتالية
                break

            last_date = record_date

        # تحديد نوع التنبيه المطلوب
        alert_message = ""
        show_alert = False

        if consecutive_absences >= 3:
            show_alert = True

            if consecutive_absences >= 4:
                # تنبيه أحمر للغياب المتكرر أكثر من 3 أيام متتالية
                alert_message = f"⚠️ تنبيه هام: المتدرب {student_name} ({student_rank}) متغيب {consecutive_absences} أيام متتالية!\n\n" \
                                f"✓ الإجراء المطلوب: رفع محاضر الغياب \nالى سعادة قائد المدينة بخطاب رسمي.\n" \
                                f"✓ الدورة: {student_course}\n" \
                                f"✓ إجمالي أيام الغياب: {total_absences} أيام"
                alert_type = "خطير"
                alert_color = "red"
            else:
                # تنبيه أصفر للغياب 3 أيام متتالية
                alert_message = f"⚠️ تنبيه: المتدرب {student_name} ({student_rank}) متغيب {consecutive_absences} أيام متتالية.\n\n" \
                                f"✓ الدورة: {student_course}\n" \
                                f"✓ إجمالي أيام الغياب: {total_absences} أيام"
                alert_type = "متوسط"
                alert_color = "orange"

        return show_alert, alert_message, alert_type if show_alert else None, alert_color if show_alert else None

    # 1. أولاً، إضافة عمود جديد في جدول attendance لحفظ اسم المستقبل
    def update_database_schema(self):
        """إضافة عمود receiver_name في جدول attendance"""
        try:
            cursor = self.conn.cursor()
            cursor.execute("PRAGMA table_info(attendance)")
            columns = [column[1] for column in cursor.fetchall()]

            if "receiver_name" not in columns:
                self.conn.execute("ALTER TABLE attendance ADD COLUMN receiver_name TEXT DEFAULT ''")
                self.conn.commit()
                print("تم إضافة عمود receiver_name بنجاح")
        except Exception as e:
            print(f"خطأ في تحديث قاعدة البيانات: {str(e)}")

    def insert_attendance_record(self, status, excuse_reason=""):
        """دالة تسجيل الحضور مع معالجة حالة المستقبلين"""
        if not self.current_user["permissions"]["can_edit_attendance"]:
            messagebox.showwarning("تنبيه", "ليس لديك صلاحية تسجيل الحضور والغياب")
            return

        national_id = self.id_entry.get().strip()
        if not national_id:
            messagebox.showwarning("تنبيه", "الرجاء اختيار متدرب من خلال البحث بالاسم أو الهوية")
            return

        cursor = self.conn.cursor()
        cursor.execute("""
            SELECT national_id, name, rank, course, is_excluded 
            FROM trainees 
            WHERE national_id=?
        """, (national_id,))

        trainee = cursor.fetchone()
        if not trainee:
            messagebox.showwarning("تنبيه", "لا يوجد متدرب بهذا الرقم")
            return

        # التحقق من استبعاد المتدرب
        if trainee[4] == 1:
            messagebox.showwarning("تنبيه", "هذا المتدرب مستبعد ولا يمكن تسجيل حضوره")
            return

        current_date = self.date_entry.get_date().strftime("%Y-%m-%d")
        cursor.execute("SELECT status FROM attendance WHERE national_id=? AND date=?", (trainee[0], current_date))
        existing_record = cursor.fetchone()

        if existing_record:
            existing_status = existing_record[0]

            # استخدام نوافذ خطأ بدلاً من معلومات لجذب انتباه المستخدم
            if existing_status == status:
                # إذا كانت نفس الحالة
                messagebox.showerror("خطأ في التكرار",
                                     f"⚠️ تنبيه: المتدرب {trainee[1]} مسجل بالفعل بحالة '{existing_status}' اليوم\n\nلا يمكن تكرار نفس الحالة للمتدرب في نفس اليوم.")
            else:
                # إذا كانت حالة مختلفة
                messagebox.showerror("تعارض في الحالة",
                                     f"⚠️ تنبـــيه: المتدرب {trainee[1]} مسجل بالفعل بحالة '{existing_status}' اليوم\n\nلتغيير الحالة من '{existing_status}' إلى '{status}'، يرجى استخدام خاصية تعديل الحضور من قائمة سجل الحضور.")

            # مسح قيمة الهوية
            self.id_entry.delete(0, tk.END)
            self.name_search_entry.delete(0, tk.END)
            return

        # التحقق من حالة المتدرب في اليوم السابق
        current_date_obj = self.date_entry.get_date()
        yesterday_date_obj = current_date_obj - datetime.timedelta(days=1)
        yesterday_date = yesterday_date_obj.strftime("%Y-%m-%d")

        cursor.execute("SELECT status FROM attendance WHERE national_id=? AND date=?", (trainee[0], yesterday_date))
        yesterday_record = cursor.fetchone()

        # متغير لحفظ اسم المستقبل
        receiver_name = ""

        # معالجة الحالات المختلفة
        if yesterday_record and yesterday_record[0] == "لم يباشر":
            if status in ["حاضر", "متأخر"]:
                # المتدرب كان "لم يباشر" بالأمس واليوم "حاضر" أو "متأخر" - يجب إدخال اسم المستقبل
                receiver_name = self.get_receiver_name(trainee[1])
                if not receiver_name:
                    # إذا ألغى المستخدم أو لم يدخل اسم، نوقف العملية
                    return
            elif status == "لم يباشر":
                # المتدرب كان "لم يباشر" بالأمس واليوم أيضاً "لم يباشر" - مسموح بدون تنبيه
                pass  # لا نفعل شيء، نكمل التسجيل بشكل طبيعي
            elif status == "غائب":
                # المتدرب كان "لم يباشر" بالأمس واليوم "غائب" - نمنع التسجيل
                messagebox.showerror("خطأ",
                                     f"لا يمكن تسجيل المتدرب {trainee[1]} كـ 'غائب'\n\n"
                                     "المتدرب كان في حالة 'لم يباشر' بالأمس.\n"
                                     "تسجيله كـ 'غائب' مخالف لتعليمات التدريب المستديمة."
                                     )
                # مسح الحقول وإيقاف العملية
                self.id_entry.delete(0, tk.END)
                self.name_search_entry.delete(0, tk.END)
                self.name_listbox.delete(0, tk.END)
                return

        t_id, t_name, t_rank, t_course, _ = trainee
        current_time = datetime.datetime.now().strftime("%H:%M:%S")

        # معالجة تسجيل حالة الغياب ورصد الغياب المتكرر
        absence_alert = False
        alert_message = ""
        alert_type = None
        alert_color = None

        if status in ["غائب"]:
            absence_alert, alert_message, alert_type, alert_color = self.check_student_absence(t_id, current_date)

        try:
            # استخدام cursor منفصل للحصول على lastrowid
            cursor = self.conn.cursor()

            cursor.execute("""
                INSERT INTO attendance (
                    national_id, name, rank, course,
                    time, date, status, original_status,
                    registered_by, excuse_reason,
                    updated_by, updated_at, receiver_name
                )
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                t_id, t_name, t_rank, t_course,
                current_time, current_date,
                status, status,
                self.current_user["full_name"], excuse_reason,
                "", "", receiver_name
            ))

            # الحصول على معرف التسجيل المضاف
            attendance_id = cursor.lastrowid

            # التأكد من commit التغييرات
            self.conn.commit()

            # إضافة معلومات التسجيل إلى قائمة السجل للتراجع
            self.session_attendance_history.append({
                'id': attendance_id,
                'national_id': t_id,
                'name': t_name,
                'course': t_course,
                'status': status,
                'date': current_date,
                'time': current_time
            })

            # تحديث رسالة التأكيد في عنصر الواجهة بدلاً من نافذة منبثقة
            if status == "حاضر":
                icon_status = "✅"
            elif status == "غائب":
                icon_status = "❌"
            elif status == "متأخر":
                icon_status = "⏰"
            elif status == "غائب بعذر":
                icon_status = "📝"
            elif status == "لم يباشر":
                icon_status = "⏳"
            elif status == "حالة وفاة":
                icon_status = "💔"
            elif status == "منوم":
                icon_status = "🏥"
            else:
                icon_status = "📌"

            # نعرض الرسالة فقط في حقل آخر متدرب سُجّل بدلاً من نافذة منبثقة
            self.last_registered_label.config(text=f"آخر متدرب سُجِّل: {t_name} ({status}) {icon_status}")

            # مسح حقول الإدخال
            self.id_entry.delete(0, tk.END)
            self.name_search_entry.delete(0, tk.END)
            self.name_listbox.delete(0, tk.END)

            self.update_statistics()
            self.update_attendance_display()

            # عرض تنبيه الغياب المتكرر إذا كان مطلوبًا
            if absence_alert:
                self.show_absence_alert(alert_message, alert_type, alert_color)

        except Exception as e:
            messagebox.showerror("خطأ", str(e))

    # 3. دالة الحصول على اسم المستقبل (كما هي)
    def get_receiver_name(self, student_name):
        """نافذة لإدخال اسم صاحب الصلاحية الذي استقبل المتدرب - محدثة بحجم أكبر"""
        receiver_window = tk.Toplevel(self.root)
        receiver_window.title("مستقبل المتدرب")
        receiver_window.geometry("550x450")  # تكبير النافذة
        receiver_window.configure(bg=self.colors["light"])
        receiver_window.transient(self.root)
        receiver_window.grab_set()

        # توسيط النافذة
        x = (receiver_window.winfo_screenwidth() - 550) // 2
        y = (receiver_window.winfo_screenheight() - 450) // 2
        receiver_window.geometry(f"550x450+{x}+{y}")

        # عنوان النافذة
        tk.Label(
            receiver_window,
            text="صاحب صلاحية مستقبل المتدرب",
            font=("Tajawal", 20, "bold"),  # خط أكبر
            bg=self.colors["primary"],
            fg="white",
            padx=15, pady=15
        ).pack(fill=tk.X)

        # إطار المحتوى
        content_frame = tk.Frame(receiver_window, bg=self.colors["light"], padx=30, pady=30)
        content_frame.pack(fill=tk.BOTH, expand=True)

        tk.Label(
            content_frame,
            text=f"المتدرب: {student_name}",
            font=("Tajawal", 14, "bold"),
            bg=self.colors["light"],
            fg=self.colors["primary"]
        ).pack(pady=(0, 5))

        tk.Label(
            content_frame,
            text="كان في حالة 'لم يباشر' بالأمس",
            font=("Tajawal", 12),
            bg=self.colors["light"]
        ).pack(pady=(0, 15))

        tk.Label(
            content_frame,
            text="من فضلك أدخل اسم صاحب الصلاحية الذي استقبله:",
            font=("Tajawal", 14, "bold"),
            bg=self.colors["light"],
            fg=self.colors["danger"]
        ).pack(pady=(0, 15))

        receiver_var = tk.StringVar()
        receiver_entry = tk.Entry(
            content_frame,
            textvariable=receiver_var,
            font=("Tajawal", 14),  # خط أكبر
            width=35,
            bd=2,
            relief=tk.GROOVE
        )
        receiver_entry.pack(pady=5)
        receiver_entry.focus_set()

        # متغير لحفظ النتيجة
        result = [None]

        def save_receiver():
            name = receiver_var.get().strip()
            if not name:
                messagebox.showwarning("تنبيه", "يجب إدخال اسم المستقبل")
                receiver_entry.focus_set()
                return
            result[0] = name
            receiver_window.destroy()

        def on_enter(event):
            save_receiver()

        receiver_entry.bind("<Return>", on_enter)

        # إطار الأزرار
        button_frame = tk.Frame(receiver_window, bg=self.colors["light"], pady=15)
        button_frame.pack(fill=tk.X, padx=30)

        save_btn = tk.Button(
            button_frame,
            text="حفظ",
            font=("Tajawal", 12, "bold"),
            bg=self.colors["success"],
            fg="white",
            padx=20, pady=8,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=save_receiver
        )
        save_btn.pack(side=tk.LEFT, padx=10)

        cancel_btn = tk.Button(
            button_frame,
            text="إلغاء",
            font=("Tajawal", 12, "bold"),
            bg=self.colors["danger"],
            fg="white",
            padx=20, pady=8,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=receiver_window.destroy
        )
        cancel_btn.pack(side=tk.RIGHT, padx=10)

        # انتظار إغلاق النافذة
        receiver_window.wait_window()

        return result[0]

    # 1. دالة معالجة المستقبلين للتحضير الجماعي
    def get_bulk_receivers_for_not_started(self, not_started_students, course_name):
        """نافذة لإدخال أسماء المستقبلين للمتدربين الذين كانوا 'لم يباشر' بالأمس"""
        if not not_started_students:
            return {}

        receivers_window = tk.Toplevel(self.root)
        receivers_window.title("مستقبلي المتدربين")
        receivers_window.geometry("700x600")
        receivers_window.configure(bg=self.colors["light"])
        receivers_window.transient(self.root)
        receivers_window.grab_set()

        # توسيط النافذة
        x = (receivers_window.winfo_screenwidth() - 700) // 2
        y = (receivers_window.winfo_screenheight() - 600) // 2
        receivers_window.geometry(f"700x600+{x}+{y}")

        # عنوان النافذة
        tk.Label(
            receivers_window,
            text=f"مستقبلي المتدربين في دورة: {course_name}",
            font=("Tajawal", 18, "bold"),
            bg=self.colors["primary"],
            fg="white",
            padx=15, pady=15
        ).pack(fill=tk.X)

        # إطار المحتوى
        main_frame = tk.Frame(receivers_window, bg=self.colors["light"])
        main_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)

        tk.Label(
            main_frame,
            text=f"يوجد {len(not_started_students)} متدرب كانوا في حالة 'لم يباشر' بالأمس",
            font=("Tajawal", 14, "bold"),
            bg=self.colors["light"],
            fg=self.colors["danger"]
        ).pack(pady=(0, 10))

        # خيارات الإدخال
        input_type_var = tk.StringVar(value="same")

        options_frame = tk.Frame(main_frame, bg=self.colors["light"])
        options_frame.pack(fill=tk.X, pady=10)

        tk.Radiobutton(
            options_frame,
            text="نفس المستقبل لجميع المتدربين",
            variable=input_type_var,
            value="same",
            font=("Tajawal", 12),
            bg=self.colors["light"]
        ).pack(anchor=tk.W)

        tk.Radiobutton(
            options_frame,
            text="مستقبل مختلف لكل متدرب",
            variable=input_type_var,
            value="different",
            font=("Tajawal", 12),
            bg=self.colors["light"]
        ).pack(anchor=tk.W)

        # إطار الإدخال الموحد
        same_receiver_frame = tk.Frame(main_frame, bg=self.colors["light"])
        same_receiver_frame.pack(fill=tk.X, pady=10)

        tk.Label(
            same_receiver_frame,
            text="اسم المستقبل:",
            font=("Tajawal", 12, "bold"),
            bg=self.colors["light"]
        ).pack(anchor=tk.W)

        same_receiver_var = tk.StringVar()
        same_receiver_entry = tk.Entry(
            same_receiver_frame,
            textvariable=same_receiver_var,
            font=("Tajawal", 12),
            width=40
        )
        same_receiver_entry.pack(fill=tk.X, pady=5)

        # إطار الإدخال المتعدد
        different_receivers_frame = tk.Frame(main_frame, bg=self.colors["light"])

        # إنشاء جدول لإدخال المستقبلين
        canvas = tk.Canvas(different_receivers_frame, bg=self.colors["light"])
        scrollbar = tk.Scrollbar(different_receivers_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg=self.colors["light"])

        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )

        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)

        # قاموس لحفظ المدخلات
        receiver_entries = {}

        # إنشاء حقول الإدخال لكل متدرب
        for student in not_started_students:
            student_frame = tk.Frame(scrollable_frame, bg=self.colors["light"], pady=5)
            student_frame.pack(fill=tk.X, padx=5)

            tk.Label(
                student_frame,
                text=f"{student['name']} ({student['national_id']})",
                font=("Tajawal", 10),
                bg=self.colors["light"],
                width=30,
                anchor=tk.W
            ).pack(side=tk.LEFT, padx=5)

            receiver_var = tk.StringVar()
            receiver_entry = tk.Entry(
                student_frame,
                textvariable=receiver_var,
                font=("Tajawal", 10),
                width=30
            )
            receiver_entry.pack(side=tk.LEFT, padx=5)

            receiver_entries[student['national_id']] = receiver_var

        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

        # دالة لتبديل الإطارات
        def toggle_frames(*args):
            if input_type_var.get() == "same":
                different_receivers_frame.pack_forget()
                same_receiver_frame.pack(fill=tk.X, pady=10)
                same_receiver_entry.focus_set()
            else:
                same_receiver_frame.pack_forget()
                different_receivers_frame.pack(fill=tk.BOTH, expand=True, pady=10)

        input_type_var.trace("w", toggle_frames)
        toggle_frames()

        # متغير لحفظ النتائج
        result = [None]

        def save_receivers():
            receivers_dict = {}

            if input_type_var.get() == "same":
                receiver_name = same_receiver_var.get().strip()
                if not receiver_name:
                    messagebox.showwarning("تنبيه", "يجب إدخال اسم المستقبل")
                    return

                # نفس المستقبل لجميع المتدربين
                for student in not_started_students:
                    receivers_dict[student['national_id']] = receiver_name
            else:
                # مستقبل مختلف لكل متدرب
                for student_id, receiver_var in receiver_entries.items():
                    receiver_name = receiver_var.get().strip()
                    if not receiver_name:
                        messagebox.showwarning("تنبيه", "يجب إدخال اسم المستقبل لجميع المتدربين")
                        return
                    receivers_dict[student_id] = receiver_name

            result[0] = receivers_dict
            receivers_window.destroy()

        # أزرار الإجراءات
        button_frame = tk.Frame(receivers_window, bg=self.colors["light"], pady=15)
        button_frame.pack(fill=tk.X, padx=20)

        save_btn = tk.Button(
            button_frame,
            text="حفظ",
            font=("Tajawal", 12, "bold"),
            bg=self.colors["success"],
            fg="white",
            padx=20, pady=8,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=save_receivers
        )
        save_btn.pack(side=tk.LEFT, padx=10)

        cancel_btn = tk.Button(
            button_frame,
            text="إلغاء",
            font=("Tajawal", 12, "bold"),
            bg=self.colors["danger"],
            fg="white",
            padx=20, pady=8,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=receivers_window.destroy
        )
        cancel_btn.pack(side=tk.RIGHT, padx=10)

        receivers_window.wait_window()

        return result[0]

    def show_absence_alert(self, message, alert_type, alert_color):
        """عرض نافذة تنبيه مخصصة للغياب المتكرر"""
        alert_window = tk.Toplevel(self.root)
        alert_window.title(f"تنبيه غياب متكرر - {alert_type}")
        alert_window.geometry("650x500")  # نافذة أكبر
        alert_window.configure(bg="#FFFFFF")
        alert_window.transient(self.root)
        alert_window.grab_set()

        # توسيط النافذة
        x = (alert_window.winfo_screenwidth() - 650) // 2
        y = (alert_window.winfo_screenheight() - 500) // 2
        alert_window.geometry(f"650x500+{x}+{y}")

        # إطار العنوان
        title_frame = tk.Frame(alert_window, bg=alert_color, padx=10, pady=15)
        title_frame.pack(fill=tk.X)

        title_label = tk.Label(
            title_frame,
            text="⚠️ تنبيه غياب متكرر ⚠️",
            font=("Tajawal", 20, "bold"),  # خط أكبر وغامق
            bg=alert_color,
            fg="white"
        )
        title_label.pack()

        # إطار الرسالة
        message_frame = tk.Frame(alert_window, bg="#FFFFFF", padx=20, pady=20)
        message_frame.pack(fill=tk.BOTH, expand=True)

        message_text = tk.Text(
            message_frame,
            wrap=tk.WORD,
            bg="#FFFFFF",
            font=("Tajawal", 16, "bold"),  # خط أكبر وغامق
            relief=tk.FLAT,
            height=8
        )
        message_text.insert(tk.END, message)
        message_text.configure(state="disabled")  # جعل النص للقراءة فقط
        message_text.pack(fill=tk.BOTH, expand=True)

        # أزرار الإجراءات
        button_frame = tk.Frame(alert_window, bg="#FFFFFF", padx=20, pady=15)
        button_frame.pack(fill=tk.X)

        ok_button = tk.Button(
            button_frame,
            text="موافق",
            font=("Tajawal", 14, "bold"),  # خط أكبر
            bg="#4CAF50",
            fg="white",
            padx=25,  # زيادة حجم الزر
            pady=8,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=alert_window.destroy
        )
        ok_button.pack(side=tk.RIGHT, padx=10)

        # إضافة زر خاص إذا كان التنبيه من النوع الخطير
        if alert_type == "خطير":
            action_button = tk.Button(
                button_frame,
                text="اتخاذ إجراء",
                font=("Tajawal", 14, "bold"),  # خط أكبر
                bg="#FF5722",
                fg="white",
                padx=25,  # زيادة حجم الزر
                pady=8,
                bd=0,
                relief=tk.FLAT,
                cursor="hand2",
                command=lambda: self.take_absence_action(alert_window)
            )
            action_button.pack(side=tk.LEFT, padx=10)

    def take_absence_action(self, parent_window=None):
        """عرض نافذة اتخاذ إجراء للغياب المتكرر"""
        # نافذة بسيطة لعرض الإجراءات المطلوبة
        messagebox.showinfo(
            "إجراءات متابعة الغياب",
            "لا يزال قيد التطوير\n\n"
            "ملاحظة: يمكن الإنتقال الى ملف المتدرب و تصدير محاضر غيابه"
        )

        # إغلاق نافذة التنبيه إذا كانت مفتوحة
        if parent_window:
            parent_window.destroy()

    def process_barcode_ids(self, status):
        """تعديل دالة معالجة الباركود لإضافة فحص الغياب المتكرر"""
        if not self.current_user["permissions"]["can_edit_attendance"]:
            messagebox.showwarning("تنبيه", "ليس لديك صلاحية تسجيل الحضور والغياب")
            return

        # قراءة النص من مربع الإدخال
        barcode_text = self.barcode_text.get(1.0, tk.END).strip()
        if not barcode_text:
            messagebox.showinfo("تنبيه", "الرجاء إدخال أرقام الهويات أولاً")
            return

        # تقسيم النص إلى أسطر للحصول على أرقام الهويات
        id_lines = [line.strip() for line in barcode_text.split("\n") if line.strip()]
        if not id_lines:
            messagebox.showinfo("تنبيه", "لم يتم العثور على أرقام هويات صالحة")
            return

        # الحصول على التاريخ الحالي ووقت التسجيل
        current_date = self.date_entry.get_date().strftime("%Y-%m-%d")
        current_time = datetime.datetime.now().strftime("%H:%M:%S")

        cursor = self.conn.cursor()

        # قوائم لتتبع النتائج
        successful_ids = []
        failed_ids = []
        already_registered_ids = []
        excluded_ids = []
        absence_alerts = []  # لتخزين معلومات تنبيهات الغياب المتكرر

        # معالجة كل رقم هوية
        for national_id in id_lines:
            # تخطي القيم الفارغة
            if not national_id:
                continue

            try:
                # التحقق من وجود المتدرب وما إذا كان مستبعدًا
                cursor.execute("""
                    SELECT national_id, name, rank, course, is_excluded 
                    FROM trainees 
                    WHERE national_id=?
                """, (national_id,))

                trainee = cursor.fetchone()
                if not trainee:
                    failed_ids.append(national_id)
                    continue

                # التحقق من استبعاد المتدرب
                if trainee[4] == 1:
                    excluded_ids.append(national_id)
                    continue

                # التحقق مما إذا كان المتدرب مسجلاً بالفعل لهذا اليوم
                cursor.execute("SELECT status FROM attendance WHERE national_id=? AND date=?",
                               (trainee[0], current_date))
                existing_record = cursor.fetchone()

                if existing_record:
                    already_registered_ids.append(national_id)
                    continue

                # فحص تنبيهات الغياب إذا كان التسجيل غيابًا
                if status == "غائب":
                    absence_alert, alert_message, alert_type, alert_color = self.check_student_absence(trainee[0],
                                                                                                       current_date)
                    if absence_alert:
                        absence_alerts.append((alert_message, alert_type, alert_color))

                # إدراج سجل حضور جديد
                with self.conn:
                    self.conn.execute("""
                        INSERT INTO attendance (
                            national_id, name, rank, course,
                            time, date, status, original_status,
                            registered_by, excuse_reason,
                            updated_by, updated_at
                        )
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                    """, (
                        trainee[0], trainee[1], trainee[2], trainee[3],
                        current_time, current_date,
                        status, status,
                        self.current_user["full_name"], "",
                        "", ""
                    ))

                successful_ids.append(national_id)

            except Exception as e:
                print(f"خطأ في معالجة الهوية {national_id}: {str(e)}")
                failed_ids.append(national_id)

        # إعداد رسالة ملخص النتائج
        result_message = f"تمت معالجة {len(id_lines)} رقم هوية:\n\n"

        if successful_ids:
            result_message += f"✅ تم تسجيل {len(successful_ids)} متدرب بنجاح بحالة '{status}'.\n"

        if already_registered_ids:
            result_message += f"⚠️ {len(already_registered_ids)} متدرب مسجل مسبقاً في هذا اليوم.\n"

        if excluded_ids:
            result_message += f"❌ {len(excluded_ids)} متدرب مستبعد لا يمكن تسجيل حضورهم.\n"

        if failed_ids:
            result_message += f"❓ {len(failed_ids)} رقم هوية غير موجود في قاعدة البيانات."

        # عرض النتائج
        messagebox.showinfo("نتائج تسجيل الحضور", result_message)

        # تفريغ مربع النص بعد المعالجة الناجحة إذا تم تسجيل متدربين بنجاح
        if successful_ids:
            self.barcode_text.delete(1.0, tk.END)

        # تحديث الإحصائيات وعرض الحضور
        self.update_statistics()
        self.update_attendance_display()

        # عرض تنبيهات الغياب المتكرر (إذا وجدت)
        if absence_alerts:
            # عرض التنبيه الأول فقط إذا كان هناك أكثر من تنبيه
            first_alert = absence_alerts[0]
            self.show_absence_alert(
                first_alert[0] + f"\n\nملاحظة: هناك {len(absence_alerts)} تنبيه غياب متكرر في هذه المجموعة."
                if len(absence_alerts) > 1 else first_alert[0],
                first_alert[1],
                first_alert[2]
            )

    def export_course_to_word(self, course_name):
        """وظيفة تصدير بيانات الدورة إلى ملف وورد مع جدول حضور فارغ للأيام بتنسيق عمودي"""
        if not self.current_user["permissions"]["can_export_data"]:
            messagebox.showwarning("تنبيه", "ليس لديك صلاحية تصدير البيانات")
            return

        try:
            # التأكد من وجود مكتبة python-docx
            if 'Document' not in globals():
                messagebox.showerror("خطأ",
                                     "لم يتم العثور على مكتبة python-docx. قم بتثبيتها باستخدام: pip install python-docx")
                return

            # الحصول على بيانات المتدربين في الدورة (فقط غير المستبعدين)
            cursor = self.conn.cursor()
            cursor.execute("""
                SELECT national_id, name, rank
                FROM trainees
                WHERE course=? AND is_excluded=0
                ORDER BY name
            """, (course_name,))
            students_data = cursor.fetchall()

            if not students_data:
                messagebox.showinfo("ملاحظة", f"لا يوجد متدربين نشطين مسجلين في الدورة '{course_name}'")
                return

            # إنشاء مستند جديد
            doc = Document()

            # إعداد المستند للغة العربية (RTL) بتنسيق عمودي
            section = doc.sections[0]
            section.page_width = Inches(8.27)  # A4 width in portrait
            section.page_height = Inches(11.69)  # A4 height in portrait
            section.left_margin = Inches(0.5)
            section.right_margin = Inches(0.5)
            section.top_margin = Inches(0.7)
            section.bottom_margin = Inches(0.7)

            # إعداد الرأس (Header) مع خط فاصل
            header = section.header
            header_para = header.paragraphs[0]
            header_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
            header_run = header_para.add_run(f'كشف حضور وغياب متدربين دورة: {course_name}')
            header_run.font.size = Pt(14)
            header_run.font.bold = True
            header_run.font.rtl = True

            # إضافة إجمالي عدد المتدربين في الرأس
            header_para = header.add_paragraph()
            header_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
            student_count_run = header_para.add_run(f'إجمالي عدد المتدربين: {len(students_data)}')
            student_count_run.font.size = Pt(12)
            student_count_run.font.bold = True
            student_count_run.font.rtl = True

            # إضافة خط أفقي بعد معلومات الدورة في الرأس
            header_para.paragraph_format.border_bottom = True

            # إضافة تاريخ الطباعة في الرأس
            today_date = datetime.datetime.now().strftime("%Y-%m-%d")
            header_para = header.add_paragraph()
            header_para.alignment = WD_ALIGN_PARAGRAPH.LEFT
            header_date = header_para.add_run(f'تاريخ الطباعة: {today_date}')
            header_date.font.size = Pt(9)
            header_date.font.rtl = True

            # إعداد التذييل بشكل بسيط
            footer = section.footer
            footer_para = footer.paragraphs[0]
            footer_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
            footer_text = footer_para.add_run('نظام إدارة الحضور والغياب - قسم شؤون المدربين')
            footer_text.font.size = Pt(9)
            footer_text.font.rtl = True

            # إضافة فقرة فاصلة قبل الجدول
            doc.add_paragraph()

            # إنشاء جدول للحضور والغياب
            table = doc.add_table(rows=1, cols=8)
            table.style = 'Table Grid'

            # تعريف رأس الجدول
            hdr_cells = table.rows[0].cells
            headers = ["العدد", "الاسم", "رقم الهوية", "الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس"]

            # إضافة العناوين من اليمين إلى اليسار (عكس الترتيب)
            for i, header in enumerate(reversed(headers)):
                hdr_cells[i].text = header
                # تنسيق العناوين
                hdr_cells[i].paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER
                for run in hdr_cells[i].paragraphs[0].runs:
                    run.font.bold = True
                    run.font.size = Pt(11)
                    run.font.rtl = True

                # تطبيق تظليل لرأس الجدول بطريقة بسيطة
                try:
                    shading_elm = parse_xml(r'<w:shd {} w:fill="D9D9D9"/>'.format(nsdecls('w')))
                    hdr_cells[i]._element.get_or_add_tcPr().append(shading_elm)
                except:
                    # في حالة حدوث خطأ، نتجاهل التظليل
                    pass

            # إضافة بيانات المتدربين
            for i, student in enumerate(students_data):
                national_id, name, rank = student
                row_cells = table.add_row().cells

                # إضافة البيانات من اليمين إلى اليسار (عكس الترتيب)
                # العدد (تسلسلي)
                row_cells[7].text = str(i + 1)
                row_cells[7].paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER

                # الاسم - تغيير المحاذاة إلى توسيط
                row_cells[6].text = name
                row_cells[6].paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER

                # رقم الهوية
                row_cells[5].text = national_id
                row_cells[5].paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER

                # الأيام تبقى فارغة للتعبئة يدوياً
                for day_idx in range(5):
                    row_cells[day_idx].paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER

                # تنسيق النص في الصف
                for cell in row_cells:
                    for paragraph in cell.paragraphs:
                        for run in paragraph.runs:
                            run.font.rtl = True
                            run.font.size = Pt(10)

            # ضبط أبعاد الجدول لتناسب التنسيق العمودي - زيادة عرض عمود الاسم
            table.autofit = False
            col_widths = [0.5, 2.6, 1.4, 0.7, 0.7, 0.7, 0.7, 0.7]  # زيادة عرض عمود الاسم (2.6 بدلاً من 2.0)

            # تطبيق العرض المحدد لكل عمود
            try:
                for i, width in enumerate(col_widths):
                    table.columns[i].width = Inches(width)
            except:
                # في حالة حدوث خطأ، نتجاهل تعديل العرض
                pass

            # إضافة مساحة بعد الجدول
            doc.add_paragraph()

            # إضافة جدول للتوقيعات
            sig_table = doc.add_table(rows=1, cols=3)
            sig_table.style = 'Table Grid'
            sig_cells = sig_table.rows[0].cells

            sig_cells[2].text = "مرشح الدورة: _________________"
            sig_cells[1].text = "مراقب الفصول: ______________"
            sig_cells[0].text = "رئيس قسم الفصول: __________________"

            for cell in sig_cells:
                cell.paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER
                for run in cell.paragraphs[0].runs:
                    run.font.rtl = True
                    run.font.size = Pt(11)

            # إضافة ملاحظات في نهاية المستند
            doc.add_paragraph()
            notes_para = doc.add_paragraph()
            notes_para.alignment = WD_ALIGN_PARAGRAPH.RIGHT
            notes_para.add_run("ملاحظات:").bold = True

            # إضافة خطوط للملاحظات
            for _ in range(3):
                line_para = doc.add_paragraph("_" * 80)
                line_para.alignment = WD_ALIGN_PARAGRAPH.RIGHT

            # حفظ المستند
            export_file = filedialog.asksaveasfilename(
                defaultextension=".docx",
                filetypes=[("Word documents", "*.docx")],
                initialfile=f"كشف_حضور_{course_name}.docx"
            )

            if export_file:
                doc.save(export_file)
                messagebox.showinfo("نجاح", f"تم تصدير كشف الحضور للدورة '{course_name}' بنجاح إلى:\n{export_file}")
                # فتح الملف مباشرة بعد التصدير
                try:
                    os.startfile(export_file)
                except:
                    # في حالة عدم تمكن النظام من فتح الملف، تجاهل الخطأ
                    pass

        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء تصدير بيانات الدورة: {str(e)}")

    def export_course_diligence_behavior(self, course_name):
        """وظيفة تصدير بيان المواظبة والسلوك للدورة مع ترتيب المتدربين حسب الخصومات"""
        if not self.current_user["permissions"]["can_export_data"]:
            messagebox.showwarning("تنبيه", "ليس لديك صلاحية تصدير البيانات")
            return

        try:
            # التأكد من وجود مكتبة python-docx
            if 'Document' not in globals():
                messagebox.showerror("خطأ",
                                     "لم يتم العثور على مكتبة python-docx. قم بتثبيتها باستخدام: pip install python-docx")
                return

            # الحصول على بيانات المتدربين في الدورة (فقط غير المستبعدين)
            cursor = self.conn.cursor()
            cursor.execute("""
                SELECT national_id, name, rank
                FROM trainees
                WHERE course=? AND is_excluded=0
                ORDER BY name
            """, (course_name,))
            students_data = cursor.fetchall()

            if not students_data:
                messagebox.showinfo("ملاحظة", f"لا يوجد متدربين نشطين مسجلين في الدورة '{course_name}'")
                return

            # إنشاء نافذة حالة لإظهار تقدم التصدير
            progress_window = tk.Toplevel(self.root)
            progress_window.title("جاري حساب المواظبة والسلوك")
            progress_window.geometry("400x150")
            progress_window.configure(bg=self.colors["light"])
            progress_window.transient(self.root)
            progress_window.resizable(False, False)
            progress_window.grab_set()

            x = (progress_window.winfo_screenwidth() - 400) // 2
            y = (progress_window.winfo_screenheight() - 150) // 2
            progress_window.geometry(f"400x150+{x}+{y}")

            tk.Label(
                progress_window,
                text=f"جاري حساب نتائج المواظبة والسلوك لدورة: {course_name}",
                font=self.fonts["text_bold"],
                bg=self.colors["light"],
                pady=10
            ).pack()

            progress_var = tk.DoubleVar()
            progress_bar = ttk.Progressbar(
                progress_window,
                variable=progress_var,
                maximum=100,
                length=350
            )
            progress_bar.pack(pady=10)

            status_label = tk.Label(
                progress_window,
                text="جاري تحليل بيانات الحضور والغياب...",
                font=self.fonts["text"],
                bg=self.colors["light"]
            )
            status_label.pack(pady=5)

            progress_window.update()

            # إنشاء مستند جديد
            doc = Document()

            # إعداد المستند للغة العربية (RTL)
            section = doc.sections[0]
            section.page_width = Inches(8.27)  # A4 width
            section.page_height = Inches(11.69)  # A4 height
            section.left_margin = Inches(0.7)
            section.right_margin = Inches(0.7)
            section.top_margin = Inches(0.7)
            section.bottom_margin = Inches(0.7)

            # إضافة عنوان المستند
            title = doc.add_heading(f'بيان المواظبة والسلوك لمتدربين دورة: {course_name}', level=0)
            title.alignment = WD_ALIGN_PARAGRAPH.CENTER
            for run in title.runs:
                run.font.size = Pt(16)
                run.font.bold = True
                run.font.rtl = True

            # إضافة معلومات الطباعة والتاريخ
            date_info = doc.add_paragraph()
            date_info.alignment = WD_ALIGN_PARAGRAPH.LEFT
            today_date = datetime.datetime.now().strftime("%Y-%m-%d")
            date_run = date_info.add_run(f'تاريخ الطباعة: {today_date}')
            date_run.font.size = Pt(10)
            date_run.font.rtl = True

            # إضافة خط أفقي
            border_paragraph = doc.add_paragraph()
            border_paragraph.paragraph_format.border_bottom = True

            # إنشاء جدول للمواظبة والسلوك
            table = doc.add_table(rows=1, cols=6)
            table.style = 'Table Grid'

            # عناوين الجدول (من اليمين إلى اليسار)
            hdr_cells = table.rows[0].cells
            headers = ["عدد", "الاسم", "الرتبة", "رقم الهوية", "المواظبة", "السلوك"]

            for i, header in enumerate(headers):
                # حساب الموقع المناسب للعناوين (من اليمين إلى اليسار)
                idx = len(headers) - i - 1
                hdr_cells[idx].text = header
                hdr_cells[idx].paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER
                for run in hdr_cells[idx].paragraphs[0].runs:
                    run.font.bold = True
                    run.font.size = Pt(12)
                    run.font.rtl = True

                # تطبيق تظليل للرأس
                try:
                    shading_elm = parse_xml(r'<w:shd {} w:fill="D9D9D9"/>'.format(nsdecls('w')))
                    hdr_cells[idx]._element.get_or_add_tcPr().append(shading_elm)
                except:
                    pass

            # معالجة بيانات كل متدرب وحساب درجة المواظبة والسلوك
            student_scores = []
            total_students = len(students_data)

            # قاموس لتخزين تفاصيل خصومات السلوك
            behavior_deductions_details = {}

            for index, student in enumerate(students_data):
                national_id, name, rank = student

                # تحديث شريط التقدم
                progress_var.set((index / total_students) * 80)  # 80% للمعالجة
                status_label.config(text=f"معالجة المتدرب {index + 1} من {total_students}: {name}")
                progress_window.update()

                # حساب درجة المواظبة
                cursor.execute("""
                    SELECT status
                    FROM attendance
                    WHERE national_id=?
                """, (national_id,))
                attendance_records = cursor.fetchall()

                diligence_score = 100.0  # البداية من 100

                for record in attendance_records:
                    status = record[0]
                    if status == "غائب":
                        diligence_score -= 4.0
                    elif status == "غائب بعذر":
                        diligence_score -= 4.0
                    elif status == "متأخر":
                        diligence_score -= 1.0
                    elif status == "حالة وفاة" or status == "منوم":
                        diligence_score -= 2.0

                # التأكد من عدم نزول الدرجة عن صفر
                diligence_score = max(0, diligence_score)

                # حساب درجة السلوك مع خصم المخالفات
                behavior_score = 100.0

                # الحصول على مخالفات المتدرب
                cursor.execute("""
                    SELECT violation_type, violation_date, behavior_deduction, action_taken, custom_action
                    FROM student_violations
                    WHERE national_id=?
                    ORDER BY violation_date DESC
                """, (national_id,))

                violations = cursor.fetchall()
                total_behavior_deduction = 0
                violation_details = []

                for violation in violations:
                    v_type, v_date, deduction, action, custom_action = violation
                    if deduction and deduction > 0:
                        total_behavior_deduction += deduction
                        # استخدام الإجراء المخصص إذا كان الإجراء "أخرى"
                        action_text = custom_action if action == "أخرى" and custom_action else action
                        violation_details.append({
                            'type': v_type,
                            'date': v_date,
                            'deduction': deduction,
                            'action': action_text
                        })

                behavior_score -= total_behavior_deduction
                behavior_score = max(0, behavior_score)  # التأكد من عدم نزول الدرجة عن صفر

                # حفظ تفاصيل الخصومات إذا وجدت
                if violation_details:
                    behavior_deductions_details[national_id] = {
                        'name': name,
                        'violations': violation_details
                    }

                # حساب إجمالي الخصومات (من المواظبة والسلوك)
                total_deductions = (100 - diligence_score) + (100 - behavior_score)

                # حفظ بيانات المتدرب مع الدرجات وإجمالي الخصومات
                student_scores.append((national_id, name, rank, diligence_score, behavior_score, total_deductions))

            # ترتيب المتدربين حسب إجمالي الخصومات (الأكثر خصماً يأتي أولاً)
            student_scores.sort(key=lambda x: x[5], reverse=True)

            # إضافة بيانات المتدربين إلى الجدول بعد الترتيب
            for index, (national_id, name, rank, diligence_score, behavior_score, total_deductions) in enumerate(
                    student_scores):
                # تحديث شريط التقدم
                progress_var.set(80 + (index / total_students) * 15)  # 15% للترتيب والإضافة
                status_label.config(text=f"إضافة المتدرب {index + 1} من {total_students} إلى التقرير")
                progress_window.update()

                # إضافة صف جديد للمتدرب
                row_cells = table.add_row().cells

                # الترتيب من اليمين إلى اليسار
                row_cells[5].text = str(index + 1)  # العدد التسلسلي
                row_cells[4].text = name  # الاسم
                row_cells[3].text = rank  # الرتبة
                row_cells[2].text = national_id  # رقم الهوية
                row_cells[1].text = f"{diligence_score:.1f}"  # المواظبة بدقة رقم عشري واحد
                row_cells[0].text = f"{behavior_score:.1f}"  # السلوك

                # تنسيق الخلايا
                for cell in row_cells:
                    cell.paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER
                    for run in cell.paragraphs[0].runs:
                        run.font.rtl = True
                        run.font.size = Pt(11)

                # تلوين الصف حسب الخصومات
                if total_deductions > 10:  # إذا كانت الخصومات كبيرة
                    try:
                        for cell in row_cells:
                            shading_elm = parse_xml(r'<w:shd {} w:fill="FFDDDD"/>'.format(nsdecls('w')))
                            cell._element.get_or_add_tcPr().append(shading_elm)
                    except:
                        pass

            # تنسيق الجدول
            table.autofit = False
            try:
                # تعيين عرض الأعمدة (العرض بالبوصة)
                widths = [0.8, 0.8, 1.2, 1.5, 2.5, 0.5]  # السلوك، المواظبة، الهوية، الرتبة، الاسم، العدد
                for i, width in enumerate(widths):
                    table.columns[i].width = Inches(width)
            except:
                pass

            # إضافة فقرة فاصلة بعد الجدول
            doc.add_paragraph()

            # إضافة جدول للتوقيعات
            signature_table = doc.add_table(rows=1, cols=3)
            signature_table.style = 'Table Grid'

            sig_cells = signature_table.rows[0].cells
            sig_cells[2].text = "مسؤول الحضور: _________________"
            sig_cells[1].text = "رئيس القسم: __________________"
            sig_cells[0].text = "مدير التدريب: ________________"

            for cell in sig_cells:
                cell.paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER
                for run in cell.paragraphs[0].runs:
                    run.font.rtl = True
                    run.font.size = Pt(11)

            # إضافة نص توضيحي في نهاية المستند
            doc.add_paragraph()
            note_para = doc.add_paragraph()
            note_para.alignment = WD_ALIGN_PARAGRAPH.RIGHT
            note_run = note_para.add_run("ملاحظات حساب المواظبة والسلوك:")
            note_run.font.bold = True
            note_run.font.rtl = True

            notes = [
                "- تبدأ درجة المواظبة من 100 درجة.",
                "- يتم خصم 4 درجات عن كل يوم غياب.",
                "- يتم خصم 4 درجات عن كل غياب بعذر.",
                "- يتم خصم 1 درجة عن كل حالة تأخير.",
                "- يتم خصم 2 درجة عن كل حالة وفاة.",
                "- يتم خصم 2 درجة عن كل حالة منوم.",
                "- درجة السلوك تبدأ من 100 درجة ويتم خصم الدرجات حسب المخالفات المسجلة.",
                "- الترتيب في الجدول حسب إجمالي الخصومات (الأكثر خصماً يظهر أولاً)."
            ]

            for note in notes:
                p = doc.add_paragraph()
                p.alignment = WD_ALIGN_PARAGRAPH.RIGHT
                p.add_run(note).font.rtl = True

            # إضافة تفاصيل خصومات السلوك إذا وجدت
            if behavior_deductions_details:
                doc.add_paragraph()

                # عنوان قسم تفاصيل خصومات السلوك
                deductions_title = doc.add_paragraph()
                deductions_title.alignment = WD_ALIGN_PARAGRAPH.RIGHT
                deductions_run = deductions_title.add_run("تفاصيل خصومات درجات السلوك:")
                deductions_run.font.bold = True
                deductions_run.font.rtl = True
                deductions_run.font.size = Pt(14)

                # إنشاء جدول لتفاصيل الخصومات
                deductions_table = doc.add_table(rows=1, cols=5)
                deductions_table.style = 'Table Grid'

                # عناوين الجدول
                headers = ["اسم المتدرب", "نوع المخالفة", "تاريخ المخالفة", "الإجراء المتخذ", "الخصم"]
                hdr_cells = deductions_table.rows[0].cells

                for i, header in enumerate(headers):
                    idx = len(headers) - i - 1
                    hdr_cells[idx].text = header
                    hdr_cells[idx].paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER
                    for run in hdr_cells[idx].paragraphs[0].runs:
                        run.font.bold = True
                        run.font.rtl = True
                        run.font.size = Pt(10)

                    # تطبيق تظليل للرأس
                    try:
                        shading_elm = parse_xml(r'<w:shd {} w:fill="E0E0E0"/>'.format(nsdecls('w')))
                        hdr_cells[idx]._element.get_or_add_tcPr().append(shading_elm)
                    except:
                        pass

                # إضافة بيانات الخصومات
                for student_id, details in behavior_deductions_details.items():
                    for violation in details['violations']:
                        row_cells = deductions_table.add_row().cells

                        row_cells[4].text = details['name']
                        row_cells[3].text = violation['type']
                        row_cells[2].text = violation['date']
                        row_cells[1].text = violation['action']
                        row_cells[0].text = f"{violation['deduction']} درجة"

                        # تنسيق الخلايا
                        for cell in row_cells:
                            cell.paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER
                            for run in cell.paragraphs[0].runs:
                                run.font.rtl = True
                                run.font.size = Pt(9)

            # تحديث شريط التقدم
            progress_var.set(95)
            status_label.config(text="فتح حوار حفظ الملف...")
            progress_window.update()

            # حفظ المستند
            export_file = filedialog.asksaveasfilename(
                defaultextension=".docx",
                filetypes=[("Word documents", "*.docx")],
                initialfile=f"بيان_المواظبة_والسلوك_{course_name}.docx"
            )

            if export_file:
                progress_var.set(95)
                status_label.config(text="جاري حفظ الملف...")
                progress_window.update()

                doc.save(export_file)

                progress_var.set(100)
                status_label.config(text="تم تصدير البيان بنجاح!")
                progress_window.update()

                # إغلاق نافذة التقدم بعد ثانيتين
                progress_window.after(2000, progress_window.destroy)

                messagebox.showinfo("نجاح",
                                    f"تم تصدير بيان المواظبة والسلوك للدورة '{course_name}' بنجاح إلى:\n{export_file}")

                # محاولة فتح الملف تلقائيًا
                try:
                    os.startfile(export_file)
                except:
                    pass
            else:
                progress_window.destroy()

        except Exception as e:
            try:
                progress_window.destroy()
            except:
                pass
            messagebox.showerror("خطأ", f"حدث خطأ أثناء تصدير بيان المواظبة والسلوك: {str(e)}")

    def manage_multi_section_courses(self):
        """وظيفة إدارة الدورات متعددة الفصول"""
        # إنشاء نافذة جديدة
        multi_window = tk.Toplevel(self.root)
        multi_window.bind("<Motion>", lambda e: self.root.reset_activity_timer() if hasattr(self.root,
                                                                                            'reset_activity_timer') else None)
        multi_window.title("إدارة الفصول و تصدير الكشوفات")
        multi_window.geometry("900x600")
        multi_window.configure(bg=self.colors["light"])
        multi_window.grab_set()
        multi_window.resizable(True, True)

        # توسيط النافذة
        x = (multi_window.winfo_screenwidth() - 900) // 2
        y = (multi_window.winfo_screenheight() - 600) // 2
        multi_window.geometry(f"900x600+{x}+{y}")

        # عنوان النافذة
        tk.Label(
            multi_window,
            text="إدارة الفصول و تصدير الكشوفات",
            font=self.fonts["large_title"],
            bg=self.colors["primary"],
            fg="white",
            padx=10, pady=10
        ).pack(fill=tk.X)

        # تعديل: إضافة إطار جديد لعرض معلومات إجمالي المتدربين تحت العنوان مباشرة
        students_info_frame = tk.Frame(multi_window, bg=self.colors["light"], padx=10, pady=5)
        students_info_frame.pack(fill=tk.X)

        # تعديل: متغير لعرض إجمالي عدد المتدربين
        total_students_var = tk.StringVar(value="")
        total_students_label = tk.Label(
            students_info_frame,
            textvariable=total_students_var,
            font=self.fonts["text_bold"],
            bg=self.colors["light"],
            fg=self.colors["primary"]
        )
        total_students_label.pack(pady=5)

        # إطار اختيار الدورة
        course_frame = tk.Frame(multi_window, bg=self.colors["light"], padx=10, pady=10)
        course_frame.pack(fill=tk.X)

        tk.Label(
            course_frame,
            text="اختيار الدورة:",
            font=self.fonts["text_bold"],
            bg=self.colors["light"]
        ).pack(side=tk.RIGHT, padx=5)

        # الحصول على قائمة الدورات
        cursor = self.conn.cursor()
        cursor.execute("SELECT DISTINCT course_name FROM course_sections")
        multi_section_courses = [row[0] for row in cursor.fetchall()]

        course_var = tk.StringVar()
        course_dropdown = ttk.Combobox(
            course_frame,
            textvariable=course_var,
            values=multi_section_courses,
            width=30,
            font=self.fonts["text"]
        )
        course_dropdown.pack(side=tk.RIGHT, padx=5)

        # زر تحديث قائمة الدورات
        refresh_btn = tk.Button(
            course_frame,
            text="تحديث",
            font=self.fonts["text_bold"],
            bg=self.colors["secondary"],
            fg="white",
            padx=10, pady=2,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=lambda: update_sections_list()
        )
        refresh_btn.pack(side=tk.LEFT, padx=5)

        #زر تعديل تاريخ الدورة
        edit_course_info_btn = tk.Button(
            course_frame,
            text="تعديل تواريخ الدورة",
            font=self.fonts["text_bold"],
            bg=self.colors["warning"],
            fg="white",
            padx=10, pady=2,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=lambda: self.edit_course_dates(course_var.get())
        )
        edit_course_info_btn.pack(side=tk.LEFT, padx=5)

        # إضافة زر حذف الدورة كاملة (للمشرفين فقط)
        if self.current_user["permissions"]["is_admin"]:
            delete_course_btn = tk.Button(
                course_frame,
                text="حذف الدورة كاملة",
                font=self.fonts["text_bold"],
                bg=self.colors["danger"],
                fg="white",
                padx=10, pady=2,
                bd=0, relief=tk.FLAT,
                cursor="hand2",
                command=lambda: delete_entire_course()
            )
            delete_course_btn.pack(side=tk.LEFT, padx=5)


        # إطار عرض الفصول
        sections_frame = tk.LabelFrame(
            multi_window,
            text="الفصول المتاحة",
            font=self.fonts["subtitle"],
            bg=self.colors["light"],
            fg=self.colors["dark"],
            padx=10, pady=10
        )
        sections_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)

        # قائمة الفصول
        list_frame = tk.Frame(sections_frame, bg=self.colors["light"])
        list_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=5, pady=5)

        list_scroll = tk.Scrollbar(list_frame)
        list_scroll.pack(side=tk.RIGHT, fill=tk.Y)

        sections_listbox = tk.Listbox(
            list_frame,
            font=self.fonts["text"],
            selectbackground=self.colors["primary"],
            selectforeground="white",
            yscrollcommand=list_scroll.set
        )
        sections_listbox.pack(fill=tk.BOTH, expand=True)
        list_scroll.config(command=sections_listbox.yview)

        # إطار التفاصيل
        details_frame = tk.Frame(sections_frame, bg=self.colors["light"], width=350)
        details_frame.pack(side=tk.RIGHT, fill=tk.BOTH, padx=5, pady=5)

        # عنوان التفاصيل
        section_title_var = tk.StringVar(value="اختر فصلاً لعرض تفاصيله")
        section_title = tk.Label(
            details_frame,
            textvariable=section_title_var,
            font=self.fonts["text_bold"],
            bg=self.colors["light"],
            fg=self.colors["primary"]
        )
        section_title.pack(pady=(0, 10))

        # تعديل: نحتفظ بمتغير عدد المتدربين للاستخدام الداخلي دون عرضه في إطار التفاصيل
        students_count_var = tk.StringVar(value="")

        # أزرار الإجراءات
        actions_frame = tk.Frame(details_frame, bg=self.colors["light"], pady=10)
        actions_frame.pack(fill=tk.X)

        export_attendance_btn = tk.Button(
            actions_frame,
            text="تصدير كشف حضور",
            font=self.fonts["text_bold"],
            bg=self.colors["primary"],
            fg="white",
            padx=10, pady=5,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=lambda: export_section_attendance_sheet()
        )
        export_attendance_btn.pack(fill=tk.X, pady=5)

        export_diligence_btn = tk.Button(
            actions_frame,
            text="تصدير كشف المواظبة والسلوك",
            font=self.fonts["text_bold"],
            bg="#8E44AD",
            fg="white",
            padx=10, pady=5,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=lambda: export_section_diligence()
        )
        export_diligence_btn.pack(fill=tk.X, pady=5)

        view_students_btn = tk.Button(
            actions_frame,
            text="عرض المتدربين وإدارة الفصول",
            font=self.fonts["text_bold"],
            bg=self.colors["success"],
            fg="white",
            padx=10, pady=5,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=lambda: manage_section_students()
        )
        view_students_btn.pack(fill=tk.X, pady=5)

        rename_section_btn = tk.Button(
            actions_frame,
            text="تغيير اسم الفصل",
            font=self.fonts["text_bold"],
            bg=self.colors["warning"],
            fg="white",
            padx=10, pady=5,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=lambda: rename_section()
        )
        rename_section_btn.pack(fill=tk.X, pady=5)

        # إضافة زر حذف الفصل مع ترحيل المتدربين (متاح للجميع)
        delete_section_btn = tk.Button(
            actions_frame,
            text="حذف الفصل مع ترحيل المتدربين",
            font=self.fonts["text_bold"],
            bg=self.colors["danger"],
            fg="white",
            padx=10, pady=5,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=lambda: delete_section_with_transfer()
        )
        delete_section_btn.pack(fill=tk.X, pady=5)

        # الإطار السفلي للأزرار
        bottom_frame = tk.Frame(multi_window, bg=self.colors["light"], pady=10)
        bottom_frame.pack(fill=tk.X, padx=10)

        add_section_btn = tk.Button(
            bottom_frame,
            text="إضافة فصل جديد",
            font=self.fonts["text_bold"],
            bg=self.colors["success"],
            fg="white",
            padx=15, pady=5,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=lambda: add_new_section()
        )
        add_section_btn.pack(side=tk.LEFT, padx=5)

        # هنا يتم إضافة الزر الجديد
        import_sections_btn = tk.Button(
            bottom_frame,
            text="استيراد تحديثات الفصول",
            font=self.fonts["text_bold"],
            bg="#FF9800",  # لون برتقالي للتمييز
            fg="white",
            padx=15, pady=5,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=lambda: import_section_updates()
        )
        import_sections_btn.pack(side=tk.LEFT, padx=5)

        # تعريف دالة للإغلاق مع تحديث البيانات
        def on_close_multi_window():
            multi_window.destroy()
            self.update_statistics()
            self.update_students_tree()
            self.update_attendance_display()  # إضافة هذا السطر لتحديث عرض سجل الحضور أيضاً

        close_btn = tk.Button(
            bottom_frame,
            text="إغلاق",
            font=self.fonts["text_bold"],
            bg=self.colors["dark"],
            fg="white",
            padx=15, pady=5,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=on_close_multi_window  # استخدام الدالة الجديدة بدلاً من multi_window.destroy
        )
        close_btn.pack(side=tk.RIGHT, padx=5)

        def import_section_updates():
            """استيراد تحديثات توزيع المتدربين على الفصول من ملف Excel مع دعم الأعمدة باللغة العربية"""
            selected_course = course_var.get().strip()
            if not selected_course:
                messagebox.showwarning("تنبيه", "الرجاء اختيار دورة أولاً")
                return

            # اختيار ملف Excel
            file_path = filedialog.askopenfilename(
                title="اختر ملف تحديثات الفصول",
                filetypes=[("Excel files", "*.xlsx"), ("All files", "*.*")]
            )

            if not file_path:
                return

            # إنشاء نافذة تقدم العملية
            progress_window = tk.Toplevel(multi_window)
            progress_window.title("استيراد تحديثات الفصول")
            progress_window.geometry("450x180")
            progress_window.configure(bg=self.colors["light"])
            progress_window.transient(multi_window)
            progress_window.grab_set()

            # توسيط النافذة
            x = (progress_window.winfo_screenwidth() - 450) // 2
            y = (progress_window.winfo_screenheight() - 180) // 2
            progress_window.geometry(f"450x180+{x}+{y}")

            tk.Label(
                progress_window,
                text=f"جاري معالجة تحديثات الفصول لدورة: {selected_course}",
                font=self.fonts["text_bold"],
                bg=self.colors["light"],
                pady=10
            ).pack()

            progress_var = tk.DoubleVar()
            progress_bar = ttk.Progressbar(
                progress_window,
                variable=progress_var,
                maximum=100,
                length=400
            )
            progress_bar.pack(pady=10)

            status_label = tk.Label(
                progress_window,
                text="جاري قراءة ملف Excel...",
                font=self.fonts["text"],
                bg=self.colors["light"]
            )
            status_label.pack(pady=5)

            progress_window.update()

            try:
                # قراءة ملف Excel
                progress_var.set(10)
                status_label.config(text="جاري قراءة ملف Excel...")
                progress_window.update()

                df = pd.read_excel(file_path)

                # تعريف ترجمة أسماء الأعمدة (دعم العربية والإنجليزية)
                column_mapping = {
                    'رقم الهوية': 'national_id',
                    'الفصل': 'section_name',
                    'اسم الفصل': 'section_name',
                    'national_id': 'national_id',
                    'section_name': 'section_name'
                }

                # تحويل أسماء الأعمدة من العربية إلى الإنجليزية
                rename_dict = {}
                for orig_col in df.columns:
                    if orig_col in column_mapping:
                        rename_dict[orig_col] = column_mapping[orig_col]

                if rename_dict:
                    df = df.rename(columns=rename_dict)

                # التحقق من وجود الأعمدة المطلوبة
                has_id = any(col in ["رقم الهوية", "national_id"] for col in df.columns)
                has_section = any(col in ["الفصل", "اسم الفصل", "section_name"] for col in df.columns)

                if not (has_id and has_section):
                    progress_window.destroy()
                    messagebox.showwarning("تنبيه",
                                           f"يجب أن يحتوي ملف التحديثات على الأعمدة التالية:\n\n" +
                                           "• رقم الهوية (national_id)\n" +
                                           "• الفصل (section_name)")
                    return

                # التحقق من صحة الفصول المذكورة في الملف
                progress_var.set(20)
                status_label.config(text="التحقق من صحة بيانات الفصول...")
                progress_window.update()

                # الحصول على قائمة الفصول المتاحة في الدورة
                cursor = self.conn.cursor()
                cursor.execute("""
                    SELECT section_name
                    FROM course_sections
                    WHERE course_name=?
                """, (selected_course,))

                available_sections = {row[0] for row in cursor.fetchall()}

                # التحقق من وجود الفصول المذكورة في الملف
                unique_sections = set(df['section_name'].dropna())
                invalid_sections = unique_sections - available_sections

                if invalid_sections:
                    progress_window.destroy()
                    messagebox.showwarning("تنبيه",
                                           f"توجد فصول غير موجودة في الدورة: {', '.join(invalid_sections)}\n\n" +
                                           "الفصول المتاحة هي: " + ', '.join(available_sections))
                    return

                # التحقق من وجود المتدربين المذكورين في ملف التحديثات
                progress_var.set(30)
                status_label.config(text="التحقق من بيانات المتدربين...")
                progress_window.update()

                # الحصول على قائمة المتدربين في الدورة الحالية
                cursor.execute("""
                    SELECT national_id, name
                    FROM trainees
                    WHERE course=? AND is_excluded=0
                """, (selected_course,))

                students_dict = {row[0]: row[1] for row in cursor.fetchall()}

                # التحقق من وجود جميع المتدربين المذكورين في الملف
                student_ids = df['national_id'].astype(str).tolist()
                invalid_students = [sid for sid in student_ids if sid not in students_dict]

                if invalid_students:
                    if len(invalid_students) > 5:
                        invalid_display = ', '.join(invalid_students[:5]) + f' وغيرهم ({len(invalid_students) - 5})'
                    else:
                        invalid_display = ', '.join(invalid_students)

                    proceed = messagebox.askyesno("تنبيه - متدربين غير موجودين",
                                                  f"هناك {len(invalid_students)} متدرب غير موجود في الدورة: {invalid_display}\n\n" +
                                                  "هل تريد المتابعة وتجاهل هؤلاء المتدربين؟")

                    if not proceed:
                        progress_window.destroy()
                        return

                # تحضير التغييرات
                progress_var.set(50)
                status_label.config(text="تحضير التغييرات...")
                progress_window.update()

                # الحصول على التوزيع الحالي للمتدربين على الفصول
                cursor.execute("""
                    SELECT national_id, section_name
                    FROM student_sections
                    WHERE course_name=?
                """, (selected_course,))

                current_assignments = {row[0]: row[1] for row in cursor.fetchall()}

                # تحضير قائمة التغييرات
                changes = []
                no_changes = []
                new_assignments = []

                for _, row in df.iterrows():
                    student_id = str(row['national_id']).strip()
                    new_section = str(row['section_name']).strip()

                    # تخطي المتدربين غير الموجودين
                    if student_id not in students_dict:
                        continue

                    # التحقق إذا كان المتدرب في فصل مختلف حاليًا
                    if student_id in current_assignments:
                        current_section = current_assignments[student_id]

                        if current_section != new_section:
                            # تغيير الفصل
                            changes.append((student_id, students_dict[student_id], current_section, new_section))
                        else:
                            # لا تغيير
                            no_changes.append((student_id, students_dict[student_id], current_section))
                    else:
                        # متدرب جديد ليس في أي فصل سابقًا
                        new_assignments.append((student_id, students_dict[student_id], new_section))

                # عرض ملخص التغييرات المقترحة
                progress_var.set(70)
                status_label.config(text="تجهيز ملخص التغييرات...")
                progress_window.update()

                summary = f"ملخص التغييرات:\n\n"
                summary += f"• عدد المتدربين الذين سيتم نقلهم بين الفصول: {len(changes)}\n"
                summary += f"• عدد المتدربين الجدد المراد تسجيلهم في فصول: {len(new_assignments)}\n"
                summary += f"• عدد المتدربين بدون تغيير: {len(no_changes)}\n"

                if invalid_students:
                    summary += f"• عدد المتدربين غير الموجودين في الدورة: {len(invalid_students)} (سيتم تجاهلهم)\n"

                progress_window.destroy()

                # عرض نافذة ملخص التغييرات
                summary_window = tk.Toplevel(multi_window)
                summary_window.title("ملخص التغييرات المقترحة")
                summary_window.geometry("600x500")
                summary_window.configure(bg=self.colors["light"])
                summary_window.transient(multi_window)
                summary_window.grab_set()

                # توسيط النافذة
                x = (summary_window.winfo_screenwidth() - 600) // 2
                y = (summary_window.winfo_screenheight() - 500) // 2
                summary_window.geometry(f"600x500+{x}+{y}")

                tk.Label(
                    summary_window,
                    text="ملخص التغييرات المقترحة",
                    font=self.fonts["title"],
                    bg=self.colors["primary"],
                    fg="white",
                    padx=10, pady=10
                ).pack(fill=tk.X)

                # عرض ملخص التغييرات
                summary_frame = tk.Frame(summary_window, bg=self.colors["light"], padx=10, pady=10)
                summary_frame.pack(fill=tk.BOTH, expand=True)

                tk.Label(
                    summary_frame,
                    text=summary,
                    font=self.fonts["text"],
                    bg=self.colors["light"],
                    justify=tk.RIGHT,
                    anchor=tk.E
                ).pack(fill=tk.X, pady=10)

                # إنشاء نوتبوك لعرض التفاصيل
                details_notebook = ttk.Notebook(summary_frame)
                details_notebook.pack(fill=tk.BOTH, expand=True, pady=10)

                # تبويب المتدربين المنقولين
                if changes:
                    changes_frame = tk.Frame(details_notebook, bg=self.colors["light"])
                    details_notebook.add(changes_frame, text=f"متدربين سيتم نقلهم ({len(changes)})")

                    changes_list = tk.Text(changes_frame, font=self.fonts["text"], width=70, height=15)
                    changes_list.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)

                    for student_id, name, old_section, new_section in changes:
                        changes_list.insert(tk.END,
                                            f"{name} ({student_id}): من فصل {old_section} إلى فصل {new_section}\n")

                    changes_list.configure(state="disabled")

                # تبويب المتدربين الجدد
                if new_assignments:
                    new_frame = tk.Frame(details_notebook, bg=self.colors["light"])
                    details_notebook.add(new_frame, text=f"تسجيلات جديدة ({len(new_assignments)})")

                    new_list = tk.Text(new_frame, font=self.fonts["text"], width=70, height=15)
                    new_list.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)

                    for student_id, name, section in new_assignments:
                        new_list.insert(tk.END, f"{name} ({student_id}): تسجيل في فصل {section}\n")

                    new_list.configure(state="disabled")

                # أزرار التأكيد أو الإلغاء
                button_frame = tk.Frame(summary_window, bg=self.colors["light"], pady=10)
                button_frame.pack(fill=tk.X, padx=10)

                def apply_changes():
                    # تنفيذ التغييرات
                    try:
                        current_date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

                        progress_window = tk.Toplevel(summary_window)
                        progress_window.title("تنفيذ التغييرات")
                        progress_window.geometry("450x180")
                        progress_window.configure(bg=self.colors["light"])
                        progress_window.transient(summary_window)
                        progress_window.grab_set()

                        # توسيط النافذة
                        x = (progress_window.winfo_screenwidth() - 450) // 2
                        y = (progress_window.winfo_screenheight() - 180) // 2
                        progress_window.geometry(f"450x180+{x}+{y}")

                        tk.Label(
                            progress_window,
                            text="جاري تنفيذ التغييرات...",
                            font=self.fonts["text_bold"],
                            bg=self.colors["light"],
                            pady=10
                        ).pack()

                        progress_var = tk.DoubleVar()
                        progress_bar = ttk.Progressbar(
                            progress_window,
                            variable=progress_var,
                            maximum=100,
                            length=400
                        )
                        progress_bar.pack(pady=10)

                        status_label = tk.Label(
                            progress_window,
                            text="جاري الإعداد...",
                            font=self.fonts["text"],
                            bg=self.colors["light"]
                        )
                        status_label.pack(pady=5)

                        progress_window.update()

                        with self.conn:
                            # تنفيذ التغييرات
                            total_operations = len(changes) + len(new_assignments)
                            operations_done = 0

                            # 1. تحديث المتدربين الذين سيتم نقلهم
                            if changes:
                                status_label.config(text="جاري تعديل تسجيلات الفصول الحالية...")
                                progress_window.update()

                                for student_id, _, _, new_section in changes:
                                    self.conn.execute("""
                                        UPDATE student_sections
                                        SET section_name=?, assigned_date=?
                                        WHERE national_id=? AND course_name=?
                                    """, (new_section, current_date, student_id, selected_course))

                                    operations_done += 1
                                    progress_percent = (operations_done / total_operations) * 100
                                    progress_var.set(progress_percent)
                                    progress_window.update()

                            # 2. إضافة المتدربين الجدد
                            if new_assignments:
                                status_label.config(text="جاري إضافة تسجيلات جديدة للفصول...")
                                progress_window.update()

                                for student_id, _, section in new_assignments:
                                    self.conn.execute("""
                                        INSERT OR REPLACE INTO student_sections
                                        (national_id, course_name, section_name, assigned_date)
                                        VALUES (?, ?, ?, ?)
                                    """, (student_id, selected_course, section, current_date))

                                    operations_done += 1
                                    progress_percent = (operations_done / total_operations) * 100
                                    progress_var.set(progress_percent)
                                    progress_window.update()

                        progress_var.set(100)
                        status_label.config(text="تم تنفيذ التغييرات بنجاح!")
                        progress_window.update()

                        # إغلاق نافذة التقدم بعد ثانيتين
                        progress_window.after(2000, progress_window.destroy)

                        # إغلاق نافذة الملخص
                        summary_window.destroy()

                        # عرض رسالة نجاح
                        messagebox.showinfo("نجاح", "تم تنفيذ تحديثات الفصول بنجاح!")

                        # تحديث القوائم
                        update_sections_list()

                    except Exception as e:
                        try:
                            progress_window.destroy()
                        except:
                            pass

                        messagebox.showerror("خطأ", f"حدث خطأ أثناء تنفيذ التغييرات: {str(e)}")

                confirm_btn = tk.Button(
                    button_frame,
                    text="تنفيذ التغييرات",
                    font=self.fonts["text_bold"],
                    bg=self.colors["success"],
                    fg="white",
                    padx=15, pady=5,
                    bd=0, relief=tk.FLAT,
                    cursor="hand2",
                    command=apply_changes
                )
                confirm_btn.pack(side=tk.LEFT, padx=5)

                cancel_btn = tk.Button(
                    button_frame,
                    text="إلغاء",
                    font=self.fonts["text_bold"],
                    bg=self.colors["danger"],
                    fg="white",
                    padx=15, pady=5,
                    bd=0, relief=tk.FLAT,
                    cursor="hand2",
                    command=summary_window.destroy
                )
                cancel_btn.pack(side=tk.RIGHT, padx=5)

            except Exception as e:
                try:
                    progress_window.destroy()
                except:
                    pass

                messagebox.showerror("خطأ", f"حدث خطأ أثناء معالجة ملف التحديثات: {str(e)}")

        # الوظائف المساعدة ضمن النافذة
        def update_sections_list():
            """تحديث قائمة الفصول المتاحة للدورة المحددة"""
            selected_course = course_var.get().strip()
            sections_listbox.delete(0, tk.END)

            # تعديل: إعادة ضبط متغيرات العرض
            section_title_var.set("اختر فصلاً لعرض تفاصيله")
            students_count_var.set("")

            if not selected_course:
                total_students_var.set("")
                return

            # تعديل: تحديث إجمالي عدد المتدربين في الدورة
            cursor = self.conn.cursor()
            cursor.execute("""
                SELECT COUNT(DISTINCT t.national_id)
                FROM trainees t
                WHERE t.course=? AND t.is_excluded=0
            """, (selected_course,))

            total_count = cursor.fetchone()[0]
            total_students_var.set(f"إجمالي المتدربين الملتحقين بدورة \"{selected_course}\": {total_count}")

            cursor = self.conn.cursor()
            cursor.execute("""
                SELECT section_name
                FROM course_sections
                WHERE course_name=?
                ORDER BY section_name
            """, (selected_course,))

            sections = cursor.fetchall()

            for section in sections:
                sections_listbox.insert(tk.END, section[0])

        def on_section_select(event=None):
            """عند اختيار فصل من القائمة"""
            selected_indices = sections_listbox.curselection()
            if not selected_indices:
                return

            selected_course = course_var.get().strip()
            selected_section = sections_listbox.get(selected_indices[0])

            if not selected_course or not selected_section:
                return

            # تحديث عنوان التفاصيل
            section_title_var.set(f"فصل: {selected_section}")

            # حساب عدد المتدربين
            cursor = self.conn.cursor()
            cursor.execute("""
                SELECT COUNT(*)
                FROM student_sections
                WHERE course_name=? AND section_name=?
            """, (selected_course, selected_section))

            count = cursor.fetchone()[0]
            students_count_var.set(f"عدد المتدربين في فصل \"{selected_section}\": {count}")

            # تعديل: تحديث عرض عدد المتدربين في العنوان
            total_students_var.set(students_count_var.get())

        def add_new_section():
            """إضافة فصل جديد للدورة المحددة"""
            selected_course = course_var.get().strip()

            if not selected_course:
                messagebox.showwarning("تنبيه", "الرجاء اختيار دورة أولاً")
                return

            section_name = simpledialog.askstring("إضافة فصل", "أدخل اسم الفصل الجديد:")

            if not section_name:
                return

            # التحقق من وجود الفصل
            cursor = self.conn.cursor()
            cursor.execute("""
                SELECT COUNT(*)
                FROM course_sections
                WHERE course_name=? AND section_name=?
            """, (selected_course, section_name))

            if cursor.fetchone()[0] > 0:
                messagebox.showwarning("تنبيه", f"الفصل '{section_name}' موجود بالفعل في هذه الدورة")
                return

            # إضافة الفصل الجديد
            try:
                current_date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                with self.conn:
                    self.conn.execute("""
                        INSERT INTO course_sections (course_name, section_name, created_date)
                        VALUES (?, ?, ?)
                    """, (selected_course, section_name, current_date))

                messagebox.showinfo("نجاح", f"تم إضافة الفصل '{section_name}' بنجاح")
                update_sections_list()
            except Exception as e:
                messagebox.showerror("خطأ", f"حدث خطأ أثناء إضافة الفصل: {str(e)}")

        def rename_section():
            """تغيير اسم الفصل المحدد"""
            selected_indices = sections_listbox.curselection()
            if not selected_indices:
                messagebox.showwarning("تنبيه", "الرجاء اختيار فصل أولاً")
                return

            selected_course = course_var.get().strip()
            old_section_name = sections_listbox.get(selected_indices[0])

            new_section_name = simpledialog.askstring("تغيير اسم الفصل", "أدخل الاسم الجديد للفصل:",
                                                      initialvalue=old_section_name)

            if not new_section_name or new_section_name == old_section_name:
                return

            # التحقق من وجود الفصل الجديد
            cursor = self.conn.cursor()
            cursor.execute("""
                SELECT COUNT(*)
                FROM course_sections
                WHERE course_name=? AND section_name=?
            """, (selected_course, new_section_name))

            if cursor.fetchone()[0] > 0:
                messagebox.showwarning("تنبيه", f"الفصل '{new_section_name}' موجود بالفعل في هذه الدورة")
                return

            # تحديث اسم الفصل
            try:
                with self.conn:
                    # تحديث في جدول الفصول
                    self.conn.execute("""
                        UPDATE course_sections
                        SET section_name=?
                        WHERE course_name=? AND section_name=?
                    """, (new_section_name, selected_course, old_section_name))

                    # تحديث في جدول المتدربين
                    self.conn.execute("""
                        UPDATE student_sections
                        SET section_name=?
                        WHERE course_name=? AND section_name=?
                    """, (new_section_name, selected_course, old_section_name))

                messagebox.showinfo("نجاح", f"تم تغيير اسم الفصل إلى '{new_section_name}' بنجاح")
                update_sections_list()
            except Exception as e:
                messagebox.showerror("خطأ", f"حدث خطأ أثناء تغيير اسم الفصل: {str(e)}")

        def manage_section_students():
            """إدارة متدربين الفصل المحدد"""
            selected_indices = sections_listbox.curselection()
            if not selected_indices:
                messagebox.showwarning("تنبيه", "الرجاء اختيار فصل أولاً")
                return

            selected_course = course_var.get().strip()
            selected_section = sections_listbox.get(selected_indices[0])

            # فتح نافذة إدارة متدربين الفصل
            self.open_section_students_window(selected_course, selected_section)

        def export_section_attendance_sheet():
            """تصدير كشف حضور للفصل المحدد"""
            selected_indices = sections_listbox.curselection()
            if not selected_indices:
                messagebox.showwarning("تنبيه", "الرجاء اختيار فصل أولاً")
                return

            selected_course = course_var.get().strip()
            selected_section = sections_listbox.get(selected_indices[0])

            # تنفيذ وظيفة تصدير كشف الحضور للفصل
            self.export_section_to_word(selected_course, selected_section)

        def export_section_diligence():
            """تصدير كشف المواظبة والسلوك للفصل المحدد"""
            selected_indices = sections_listbox.curselection()
            if not selected_indices:
                messagebox.showwarning("تنبيه", "الرجاء اختيار فصل أولاً")
                return

            selected_course = course_var.get().strip()
            selected_section = sections_listbox.get(selected_indices[0])

            # تنفيذ وظيفة تصدير كشف المواظبة والسلوك للفصل
            self.export_section_diligence_behavior(selected_course, selected_section)

        # وظيفة حذف الفصل مع ترحيل المتدربين
        def delete_section_with_transfer():
            """حذف الفصل مع ترحيل المتدربين إلى فصل آخر"""
            selected_indices = sections_listbox.curselection()
            if not selected_indices:
                messagebox.showwarning("تنبيه", "الرجاء اختيار فصل للحذف")
                return

            selected_course = course_var.get().strip()
            selected_section = sections_listbox.get(selected_indices[0])

            # الحصول على عدد المتدربين في الفصل المحدد
            cursor = self.conn.cursor()
            cursor.execute("""
                SELECT COUNT(*)
                FROM student_sections
                WHERE course_name=? AND section_name=?
            """, (selected_course, selected_section))

            students_count = cursor.fetchone()[0]

            # التحقق من وجود فصول أخرى
            cursor.execute("""
                SELECT section_name
                FROM course_sections
                WHERE course_name=? AND section_name!=?
            """, (selected_course, selected_section))

            other_sections = [row[0] for row in cursor.fetchall()]

            if not other_sections:
                messagebox.showwarning("تنبيه",
                                       f"لا يوجد فصول أخرى في الدورة '{selected_course}' لترحيل المتدربين إليها.\n\nيجب أن يتوفر فصل واحد على الأقل لنقل المتدربين إليه.")
                return

            # إذا كان هناك متدربين في الفصل، اطلب تحديد فصل للترحيل
            if students_count > 0:
                # عرض نافذة لاختيار الفصل المراد الترحيل إليه
                transfer_window = tk.Toplevel(multi_window)
                transfer_window.title("ترحيل المتدربين")
                transfer_window.geometry("400x300")
                transfer_window.configure(bg=self.colors["light"])
                transfer_window.transient(multi_window)
                transfer_window.grab_set()

                # توسيط النافذة
                x = (transfer_window.winfo_screenwidth() - 400) // 2
                y = (transfer_window.winfo_screenheight() - 300) // 2
                transfer_window.geometry(f"400x300+{x}+{y}")

                tk.Label(
                    transfer_window,
                    text=f"ترحيل متدربين الفصل: {selected_section}",
                    font=self.fonts["title"],
                    bg=self.colors["primary"],
                    fg="white",
                    padx=10, pady=10
                ).pack(fill=tk.X)

                tk.Label(
                    transfer_window,
                    text=f"يوجد {students_count} متدرب في هذا الفصل.\nاختر الفصل المراد ترحيل المتدربين إليه:",
                    font=self.fonts["text"],
                    bg=self.colors["light"],
                    pady=10
                ).pack()

                # قائمة الفصول المتاحة للترحيل
                target_var = tk.StringVar()
                target_listbox = tk.Listbox(
                    transfer_window,
                    font=self.fonts["text"],
                    selectbackground=self.colors["primary"],
                    selectforeground="white",
                    height=8
                )
                target_listbox.pack(fill=tk.X, padx=20, pady=10)

                # إضافة أسماء الفصول إلى القائمة
                for section in other_sections:
                    target_listbox.insert(tk.END, section)

                # إذا كان هناك فصل واحد فقط، حدده تلقائيًا
                if len(other_sections) == 1:
                    target_listbox.select_set(0)

                button_frame = tk.Frame(transfer_window, bg=self.colors["light"], pady=10)
                button_frame.pack(fill=tk.X, padx=20)

                def execute_transfer():
                    """تنفيذ عملية الترحيل وحذف الفصل"""
                    selected_indices = target_listbox.curselection()
                    if not selected_indices:
                        messagebox.showwarning("تنبيه", "الرجاء اختيار فصل للترحيل إليه")
                        return

                    target_section = target_listbox.get(selected_indices[0])

                    try:
                        with self.conn:
                            # ترحيل المتدربين إلى الفصل المحدد
                            self.conn.execute("""
                                UPDATE student_sections
                                SET section_name=?
                                WHERE course_name=? AND section_name=?
                            """, (target_section, selected_course, selected_section))

                            # حذف الفصل
                            self.conn.execute("""
                                DELETE FROM course_sections
                                WHERE course_name=? AND section_name=?
                            """, (selected_course, selected_section))

                        messagebox.showinfo("نجاح",
                                            f"تم ترحيل {students_count} متدرب من الفصل '{selected_section}' إلى الفصل '{target_section}' وحذف الفصل بنجاح")
                        transfer_window.destroy()
                        update_sections_list()

                        # تحديث الإحصائيات بعد عملية الترحيل
                        self.update_statistics()
                        self.update_students_tree()
                        self.update_attendance_display()

                    except Exception as e:
                        messagebox.showerror("خطأ", f"حدث خطأ أثناء الترحيل: {str(e)}")

                transfer_btn = tk.Button(
                    button_frame,
                    text="ترحيل وحذف",
                    font=self.fonts["text_bold"],
                    bg=self.colors["warning"],
                    fg="white",
                    padx=15, pady=5,
                    bd=0, relief=tk.FLAT,
                    cursor="hand2",
                    command=execute_transfer
                )
                transfer_btn.pack(side=tk.LEFT)

                cancel_btn = tk.Button(
                    button_frame,
                    text="إلغاء",
                    font=self.fonts["text_bold"],
                    bg=self.colors["danger"],
                    fg="white",
                    padx=15, pady=5,
                    bd=0, relief=tk.FLAT,
                    cursor="hand2",
                    command=transfer_window.destroy
                )
                cancel_btn.pack(side=tk.RIGHT)

            else:
                # إذا لم يكن هناك متدربين، يمكن حذف الفصل مباشرة
                if messagebox.askyesno("تأكيد", f"هل أنت متأكد من حذف الفصل '{selected_section}'؟"):
                    try:
                        with self.conn:
                            self.conn.execute("""
                                DELETE FROM course_sections
                                WHERE course_name=? AND section_name=?
                            """, (selected_course, selected_section))

                        messagebox.showinfo("نجاح", f"تم حذف الفصل '{selected_section}' بنجاح")
                        update_sections_list()

                        # تحديث الإحصائيات بعد حذف الفصل
                        self.update_statistics()
                        self.update_students_tree()
                        self.update_attendance_display()

                    except Exception as e:
                        messagebox.showerror("خطأ", f"حدث خطأ أثناء حذف الفصل: {str(e)}")

        # وظيفة حذف الدورة كاملة (للمشرفين فقط)
        def delete_entire_course():
            """حذف الدورة كاملة مع جميع الفصول والمتدربين"""
            if not self.current_user["permissions"]["is_admin"]:
                messagebox.showwarning("تنبيه", "هذه الوظيفة متاحة للمشرفين فقط")
                return

            selected_course = course_var.get().strip()
            if not selected_course:
                messagebox.showwarning("تنبيه", "الرجاء اختيار دورة للحذف")
                return

            # التأكيد قبل الحذف
            confirmation = messagebox.askquestion(
                "تحذير - حذف دورة كاملة",
                f"تحذير! أنت على وشك حذف الدورة '{selected_course}' بالكامل.\n\n"
                "سيؤدي هذا إلى:\n"
                "• حذف جميع الفصول في الدورة\n"
                "• حذف جميع المتدربين المرتبطين بالدورة\n"
                "• حذف جميع سجلات الحضور المرتبطة بالدورة\n\n"
                "هذا الإجراء لا يمكن التراجع عنه.\n\n"
                "هل أنت متأكد من رغبتك في حذف الدورة بالكامل؟",
                icon="warning",
                type="yesnocancel"
            )

            if confirmation != "yes":
                return

            # طلب كلمة مرور المشرف للتأكيد
            admin_password = simpledialog.askstring(
                "تأكيد حذف الدورة",
                "أدخل كلمة مرور المشرف للتأكيد:",
                show="*"
            )

            if not admin_password:
                return

            # التحقق من كلمة المرور
            hashed_password = hashlib.sha256(admin_password.encode()).hexdigest()
            cursor = self.conn.cursor()
            cursor.execute("SELECT password FROM users WHERE username=?", ("admin",))
            result = cursor.fetchone()

            if not result or result[0] != hashed_password:
                messagebox.showwarning("تنبيه", "كلمة المرور غير صحيحة")
                return

            # بدء عملية الحذف
            try:
                # إظهار نافذة تقدم العملية
                progress_window = tk.Toplevel(multi_window)
                progress_window.title("جاري حذف الدورة")
                progress_window.geometry("400x150")
                progress_window.configure(bg=self.colors["light"])
                progress_window.transient(multi_window)
                progress_window.grab_set()

                # توسيط النافذة
                x = (progress_window.winfo_screenwidth() - 400) // 2
                y = (progress_window.winfo_screenheight() - 150) // 2
                progress_window.geometry(f"400x150+{x}+{y}")

                tk.Label(
                    progress_window,
                    text=f"جاري حذف الدورة '{selected_course}'...",
                    font=self.fonts["text_bold"],
                    bg=self.colors["light"],
                    pady=10
                ).pack()

                progress_var = tk.DoubleVar()
                progress_bar = ttk.Progressbar(
                    progress_window,
                    variable=progress_var,
                    maximum=100,
                    length=350
                )
                progress_bar.pack(pady=10)

                status_label = tk.Label(
                    progress_window,
                    text="جاري تحضير العملية...",
                    font=self.fonts["text"],
                    bg=self.colors["light"]
                )
                status_label.pack(pady=5)

                progress_window.update()

                # الحصول على جميع أرقام هويات المتدربين في الدورة
                cursor.execute("""
                    SELECT national_id 
                    FROM trainees 
                    WHERE course=?
                """, (selected_course,))
                student_ids = [row[0] for row in cursor.fetchall()]

                total_steps = 3
                current_step = 0

                # 1. حذف سجلات الحضور
                progress_var.set((current_step / total_steps) * 100)
                status_label.config(text="جاري حذف سجلات الحضور...")
                progress_window.update()

                with self.conn:
                    for student_id in student_ids:
                        self.conn.execute("""
                            DELETE FROM attendance 
                            WHERE national_id=?
                        """, (student_id,))

                current_step += 1
                progress_var.set((current_step / total_steps) * 100)
                status_label.config(text="جاري حذف سجلات الفصول...")
                progress_window.update()

                # 2. حذف سجلات الفصول
                with self.conn:
                    self.conn.execute("""
                        DELETE FROM student_sections 
                        WHERE course_name=?
                    """, (selected_course,))

                    self.conn.execute("""
                        DELETE FROM course_sections 
                        WHERE course_name=?
                    """, (selected_course,))

                current_step += 1
                progress_var.set((current_step / total_steps) * 100)
                status_label.config(text="جاري حذف بيانات المتدربين...")
                progress_window.update()

                # 3. حذف المتدربين
                with self.conn:
                    self.conn.execute("""
                        DELETE FROM trainees 
                        WHERE course=?
                    """, (selected_course,))

                current_step += 1
                progress_var.set(100)
                status_label.config(text="تم حذف الدورة بنجاح!")
                progress_window.update()

                # تحديث الإحصائيات بعد الحذف
                self.update_statistics()
                self.update_students_tree()
                self.update_attendance_display()

                # إغلاق نافذة التقدم بعد ثلاث ثوان
                progress_window.after(3000, progress_window.destroy)

                messagebox.showinfo("نجاح", f"تم حذف الدورة '{selected_course}' بنجاح مع جميع البيانات المرتبطة بها")

                # تحديث القائمة
                cursor.execute("SELECT DISTINCT course_name FROM course_sections")
                updated_courses = [row[0] for row in cursor.fetchall()]
                course_dropdown['values'] = updated_courses

                # مسح القيمة الحالية إذا تم حذفها
                if selected_course not in updated_courses:
                    course_var.set("")

                # تحديث قائمة الفصول
                sections_listbox.delete(0, tk.END)
                section_title_var.set("اختر فصلاً لعرض تفاصيله")
                students_count_var.set("")

            except Exception as e:
                messagebox.showerror("خطأ", f"حدث خطأ أثناء حذف الدورة: {str(e)}")
                try:
                    progress_window.destroy()
                except:
                    pass

        # ربط وظيفة اختيار الفصل
        sections_listbox.bind("<<ListboxSelect>>", on_section_select)

        # ربط وظيفة تحديث القائمة بتغيير الدورة
        course_dropdown.bind("<<ComboboxSelected>>", lambda e: update_sections_list())

    def open_section_students_window(self, course_name, section_name):
        """فتح نافذة إدارة متدربين الفصل"""
        students_window = tk.Toplevel(self.root)
        students_window.title(f"إدارة متدربين فصل {section_name} - {course_name}")
        students_window.geometry("900x600")
        students_window.configure(bg=self.colors["light"])
        students_window.grab_set()
        students_window.resizable(True, True)

        # توسيط النافذة
        x = (students_window.winfo_screenwidth() - 900) // 2
        y = (students_window.winfo_screenheight() - 600) // 2
        students_window.geometry(f"900x600+{x}+{y}")

        # عنوان النافذة
        tk.Label(
            students_window,
            text=f"إدارة متدربين فصل: {section_name} - دورة: {course_name}",
            font=self.fonts["title"],
            bg=self.colors["primary"],
            fg="white",
            padx=10, pady=10
        ).pack(fill=tk.X)

        # إطار البحث
        search_frame = tk.Frame(students_window, bg=self.colors["light"], padx=10, pady=10)
        search_frame.pack(fill=tk.X)

        tk.Label(
            search_frame,
            text="البحث عن متدرب:",
            font=self.fonts["text_bold"],
            bg=self.colors["light"]
        ).pack(side=tk.RIGHT, padx=5)

        search_var = tk.StringVar()
        search_entry = tk.Entry(
            search_frame,
            textvariable=search_var,
            font=self.fonts["text"],
            width=25
        )
        search_entry.pack(side=tk.RIGHT, padx=5)

        search_btn = tk.Button(
            search_frame,
            text="بحث",
            font=self.fonts["text_bold"],
            bg=self.colors["secondary"],
            fg="white",
            padx=10, pady=2,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=lambda: search_students()
        )
        search_btn.pack(side=tk.RIGHT, padx=5)

        # إطار القوائم المزدوجة
        lists_frame = tk.Frame(students_window, bg=self.colors["light"])
        lists_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)

        # قائمة المتدربين في الفصل
        section_frame = tk.LabelFrame(
            lists_frame,
            text=f"متدربين فصل {section_name}",
            font=self.fonts["text_bold"],
            bg=self.colors["light"],
            fg=self.colors["dark"],
            padx=5, pady=5
        )
        section_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 5))

        section_scroll = tk.Scrollbar(section_frame)
        section_scroll.pack(side=tk.RIGHT, fill=tk.Y)

        section_students = tk.Listbox(
            section_frame,
            font=self.fonts["text"],
            selectbackground=self.colors["primary"],
            selectforeground="white",
            yscrollcommand=section_scroll.set
        )
        section_students.pack(fill=tk.BOTH, expand=True, pady=5)
        section_scroll.config(command=section_students.yview)

        # القائمة الوسطى للأزرار
        middle_frame = tk.Frame(lists_frame, bg=self.colors["light"], width=100)
        middle_frame.pack(side=tk.LEFT, fill=tk.Y, padx=5)

        move_to_other_btn = tk.Button(
            middle_frame,
            text=">>",
            font=self.fonts["text_bold"],
            bg=self.colors["primary"],
            fg="white",
            padx=5, pady=2,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=lambda: move_to_other_section()
        )
        move_to_other_btn.pack(pady=5)

        move_to_current_btn = tk.Button(
            middle_frame,
            text="<<",
            font=self.fonts["text_bold"],
            bg=self.colors["success"],
            fg="white",
            padx=5, pady=2,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=lambda: move_to_current_section()
        )
        move_to_current_btn.pack(pady=5)

        # قائمة المتدربين في الدورة بدون فصل أو في فصول أخرى
        other_frame = tk.LabelFrame(
            lists_frame,
            text="متدربين الدورة الآخرين",
            font=self.fonts["text_bold"],
            bg=self.colors["light"],
            fg=self.colors["dark"],
            padx=5, pady=5
        )
        other_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=(5, 0))

        other_scroll = tk.Scrollbar(other_frame)
        other_scroll.pack(side=tk.RIGHT, fill=tk.Y)

        other_students = tk.Listbox(
            other_frame,
            font=self.fonts["text"],
            selectbackground=self.colors["warning"],
            selectforeground="white",
            yscrollcommand=other_scroll.set
        )
        other_students.pack(fill=tk.BOTH, expand=True, pady=5)
        other_scroll.config(command=other_students.yview)

        # إطار المعلومات
        info_frame = tk.Frame(students_window, bg=self.colors["light"], padx=10, pady=5)
        info_frame.pack(fill=tk.X)

        section_count_var = tk.StringVar(value="عدد متدربين الفصل: 0")
        other_count_var = tk.StringVar(value="عدد المتدربين الآخرين: 0")

        section_count_label = tk.Label(
            info_frame,
            textvariable=section_count_var,
            font=self.fonts["text"],
            bg=self.colors["light"]
        )
        section_count_label.pack(side=tk.RIGHT, padx=10)

        other_count_label = tk.Label(
            info_frame,
            textvariable=other_count_var,
            font=self.fonts["text"],
            bg=self.colors["light"]
        )
        other_count_label.pack(side=tk.LEFT, padx=10)

        # إطار الأزرار السفلي
        button_frame = tk.Frame(students_window, bg=self.colors["light"], pady=10)
        button_frame.pack(fill=tk.X, padx=10)

        save_btn = tk.Button(
            button_frame,
            text="حفظ التغييرات",
            font=self.fonts["text_bold"],
            bg=self.colors["success"],
            fg="white",
            padx=15, pady=5,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=lambda: save_changes()
        )
        save_btn.pack(side=tk.LEFT, padx=5)

        close_btn = tk.Button(
            button_frame,
            text="إغلاق",
            font=self.fonts["text_bold"],
            bg=self.colors["dark"],
            fg="white",
            padx=15, pady=5,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=students_window.destroy
        )
        close_btn.pack(side=tk.RIGHT, padx=5)

        # حفظ التغييرات المؤقتة
        # القواميس تخزن: {الهوية: الاسم}
        current_section_students = {}  # المتدربين في الفصل الحالي
        other_section_students = {}  # المتدربين الآخرين
        modified = False  # هل تم تعديل البيانات

        # الوظائف المساعدة
        def load_students():
            """تحميل بيانات المتدربين"""
            nonlocal current_section_students, other_section_students

            # مسح القوائم
            section_students.delete(0, tk.END)
            other_students.delete(0, tk.END)
            current_section_students.clear()
            other_section_students.clear()

            cursor = self.conn.cursor()

            # 1. الحصول على متدربين الفصل الحالي
            cursor.execute("""
                SELECT t.national_id, t.name
                FROM trainees t
                JOIN student_sections s ON t.national_id = s.national_id
                WHERE t.course=? AND s.section_name=? AND t.is_excluded=0
                ORDER BY t.name
            """, (course_name, section_name))

            for row in cursor.fetchall():
                student_id, student_name = row
                display_text = f"{student_name} ({student_id})"
                section_students.insert(tk.END, display_text)
                current_section_students[student_id] = student_name

            # 2. الحصول على باقي متدربين الدورة (غير مسجلين في فصول أو في فصول أخرى)
            cursor.execute("""
                SELECT t.national_id, t.name, 
                       (SELECT section_name FROM student_sections 
                        WHERE national_id=t.national_id AND course_name=t.course) as section
                FROM trainees t
                WHERE t.course=? AND t.is_excluded=0
                ORDER BY t.name
            """, (course_name,))

            for row in cursor.fetchall():
                student_id, student_name, student_section = row

                # تخطي المتدربين في الفصل الحالي
                if student_section == section_name:
                    continue

                # إضافة المتدربين الآخرين
                display_text = f"{student_name} ({student_id})"
                if student_section:
                    display_text += f" - فصل: {student_section}"
                else:
                    display_text += " - بدون فصل"

                other_students.insert(tk.END, display_text)
                other_section_students[student_id] = student_name

            # تحديث العدادات
            section_count_var.set(f"عدد متدربين الفصل: {len(current_section_students)}")
            other_count_var.set(f"عدد المتدربين الآخرين: {len(other_section_students)}")

        def search_students():
            """البحث عن متدربين"""
            search_text = search_var.get().strip()
            if not search_text:
                load_students()
                return

            # مسح القوائم
            section_students.delete(0, tk.END)
            other_students.delete(0, tk.END)

            # البحث في قائمة متدربين الفصل الحالي
            for student_id, student_name in current_section_students.items():
                if (search_text.lower() in student_name.lower() or
                        search_text in student_id):
                    display_text = f"{student_name} ({student_id})"
                    section_students.insert(tk.END, display_text)

            # البحث في قائمة المتدربين الآخرين
            for student_id, student_name in other_section_students.items():
                if (search_text.lower() in student_name.lower() or
                        search_text in student_id):
                    display_text = f"{student_name} ({student_id})"

                    # التحقق من وجود معلومات الفصل
                    cursor = self.conn.cursor()
                    cursor.execute("""
                        SELECT section_name FROM student_sections
                        WHERE national_id=? AND course_name=?
                    """, (student_id, course_name))

                    result = cursor.fetchone()

                    if result and result[0]:
                        display_text += f" - فصل: {result[0]}"
                    else:
                        display_text += " - بدون فصل"

                    other_students.insert(tk.END, display_text)

        def move_to_other_section():
            """نقل المتدربين المحددين من الفصل الحالي إلى قائمة المتدربين الآخرين"""
            nonlocal modified

            selected_indices = section_students.curselection()
            if not selected_indices:
                return

            for index in reversed(selected_indices):
                student_text = section_students.get(index)
                student_id = extract_id_from_text(student_text)

                if student_id in current_section_students:
                    student_name = current_section_students[student_id]

                    # نقل المتدرب إلى القائمة الأخرى
                    other_students.insert(tk.END, f"{student_name} ({student_id}) - بدون فصل")
                    other_section_students[student_id] = student_name

                    # حذف المتدرب من القائمة الحالية
                    del current_section_students[student_id]
                    section_students.delete(index)

                    modified = True

            # تحديث العدادات
            section_count_var.set(f"عدد متدربين الفصل: {len(current_section_students)}")
            other_count_var.set(f"عدد المتدربين الآخرين: {len(other_section_students)}")

        def move_to_current_section():
            """نقل المتدربين المحددين من قائمة المتدربين الآخرين إلى الفصل الحالي"""
            nonlocal modified

            selected_indices = other_students.curselection()
            if not selected_indices:
                return

            for index in reversed(selected_indices):
                student_text = other_students.get(index)
                student_id = extract_id_from_text(student_text)

                if student_id in other_section_students:
                    student_name = other_section_students[student_id]

                    # نقل المتدرب إلى الفصل الحالي
                    section_students.insert(tk.END, f"{student_name} ({student_id})")
                    current_section_students[student_id] = student_name

                    # حذف المتدرب من القائمة الأخرى
                    del other_section_students[student_id]
                    other_students.delete(index)

                    modified = True

            # تحديث العدادات
            section_count_var.set(f"عدد متدربين الفصل: {len(current_section_students)}")
            other_count_var.set(f"عدد المتدربين الآخرين: {len(other_section_students)}")

        def extract_id_from_text(text):
            """استخراج رقم الهوية من النص المعروض"""
            # النص بشكل: "اسم المتدرب (رقم الهوية) - معلومات إضافية"
            try:
                start = text.find("(") + 1
                end = text.find(")")
                if start > 0 and end > start:
                    return text[start:end]
            except:
                pass
            return ""

        def save_changes():
            """حفظ التغييرات في قاعدة البيانات"""
            nonlocal modified

            if not modified:
                messagebox.showinfo("معلومات", "لم يتم إجراء أي تغييرات")
                return

            # تحديث بيانات المتدربين في قاعدة البيانات
            current_date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

            try:
                cursor = self.conn.cursor()
                with self.conn:
                    # 1. حذف كل المتدربين من الفصل الحالي
                    self.conn.execute("""
                        DELETE FROM student_sections
                        WHERE course_name=? AND section_name=?
                    """, (course_name, section_name))

                    # 2. إضافة المتدربين الحاليين في الفصل
                    for student_id in current_section_students:
                        self.conn.execute("""
                            INSERT OR REPLACE INTO student_sections
                            (national_id, course_name, section_name, assigned_date)
                            VALUES (?, ?, ?, ?)
                        """, (student_id, course_name, section_name, current_date))

                messagebox.showinfo("نجاح", "تم حفظ التغييرات بنجاح")
                modified = False
            except Exception as e:
                messagebox.showerror("خطأ", f"حدث خطأ أثناء حفظ التغييرات: {str(e)}")

        # تحميل بيانات المتدربين عند فتح النافذة
        load_students()

    def export_section_to_word(self, course_name, section_name):
        """تصدير كشف حضور للفصل المحدد"""
        if not self.current_user["permissions"]["can_export_data"]:
            messagebox.showwarning("تنبيه", "ليس لديك صلاحية تصدير البيانات")
            return

        try:
            # التأكد من وجود مكتبة python-docx
            if 'Document' not in globals():
                messagebox.showerror("خطأ",
                                     "لم يتم العثور على مكتبة python-docx. قم بتثبيتها باستخدام: pip install python-docx")
                return

            # الحصول على بيانات المتدربين في الفصل المحدد (فقط غير المستبعدين)
            cursor = self.conn.cursor()
            cursor.execute("""
                SELECT t.national_id, t.name, t.rank
                FROM trainees t
                JOIN student_sections s ON t.national_id = s.national_id
                WHERE t.course=? AND s.section_name=? AND t.is_excluded=0
                ORDER BY t.name
            """, (course_name, section_name))
            students_data = cursor.fetchall()

            if not students_data:
                messagebox.showinfo("ملاحظة",
                                    f"لا يوجد متدربين نشطين مسجلين في فصل '{section_name}' من دورة '{course_name}'")
                return

            # إنشاء مستند جديد
            doc = Document()

            # إعداد المستند للغة العربية (RTL) بتنسيق عمودي
            section = doc.sections[0]
            section.page_width = Inches(8.27)  # A4 width in portrait
            section.page_height = Inches(11.69)  # A4 height in portrait
            section.left_margin = Inches(0.5)
            section.right_margin = Inches(0.5)
            section.top_margin = Inches(0.7)
            section.bottom_margin = Inches(0.7)

            # إعداد الرأس (Header) مع خط فاصل
            header = section.header
            header_para = header.paragraphs[0]
            header_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
            header_run = header_para.add_run(f'كشف حضور وغياب متدربين فصل: {section_name} - دورة: {course_name}')
            header_run.font.size = Pt(14)
            header_run.font.bold = True
            header_run.font.rtl = True

            # إضافة إجمالي عدد المتدربين في الرأس
            header_para = header.add_paragraph()
            header_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
            student_count_run = header_para.add_run(f'إجمالي عدد المتدربين: {len(students_data)}')
            student_count_run.font.size = Pt(12)
            student_count_run.font.bold = True
            student_count_run.font.rtl = True

            # إضافة خط أفقي بعد معلومات الدورة في الرأس
            header_para.paragraph_format.border_bottom = True

            # إضافة تاريخ الطباعة في الرأس
            today_date = datetime.datetime.now().strftime("%Y-%m-%d")
            header_para = header.add_paragraph()
            header_para.alignment = WD_ALIGN_PARAGRAPH.LEFT
            header_date = header_para.add_run(f'تاريخ الطباعة: {today_date}')
            header_date.font.size = Pt(9)
            header_date.font.rtl = True

            # إعداد التذييل بشكل بسيط
            footer = section.footer
            footer_para = footer.paragraphs[0]
            footer_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
            footer_text = footer_para.add_run('نظام إدارة الحضور والغياب - قسم شؤون المدربين')
            footer_text.font.size = Pt(9)
            footer_text.font.rtl = True

            # إضافة فقرة فاصلة قبل الجدول
            doc.add_paragraph()

            # إنشاء جدول للحضور والغياب
            table = doc.add_table(rows=1, cols=8)
            table.style = 'Table Grid'

            # تعريف رأس الجدول
            hdr_cells = table.rows[0].cells
            headers = ["العدد", "الاسم", "رقم الهوية", "الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس"]

            # إضافة العناوين من اليمين إلى اليسار (عكس الترتيب)
            for i, header in enumerate(reversed(headers)):
                hdr_cells[i].text = header
                # تنسيق العناوين
                hdr_cells[i].paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER
                for run in hdr_cells[i].paragraphs[0].runs:
                    run.font.bold = True
                    run.font.size = Pt(11)
                    run.font.rtl = True

                # تطبيق تظليل لرأس الجدول بطريقة بسيطة
                try:
                    shading_elm = parse_xml(r'<w:shd {} w:fill="D9D9D9"/>'.format(nsdecls('w')))
                    hdr_cells[i]._element.get_or_add_tcPr().append(shading_elm)
                except:
                    # في حالة حدوث خطأ، نتجاهل التظليل
                    pass

            # إضافة بيانات المتدربين
            for i, student in enumerate(students_data):
                national_id, name, rank = student
                row_cells = table.add_row().cells

                # إضافة البيانات من اليمين إلى اليسار (عكس الترتيب)
                # العدد (تسلسلي)
                row_cells[7].text = str(i + 1)
                row_cells[7].paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER

                # الاسم - تغيير المحاذاة إلى توسيط
                row_cells[6].text = name
                row_cells[6].paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER

                # رقم الهوية
                row_cells[5].text = national_id
                row_cells[5].paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER

                # الأيام تبقى فارغة للتعبئة يدوياً
                for day_idx in range(5):
                    row_cells[day_idx].paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER

                # تنسيق النص في الصف
                for cell in row_cells:
                    for paragraph in cell.paragraphs:
                        for run in paragraph.runs:
                            run.font.rtl = True
                            run.font.size = Pt(10)

            # ضبط أبعاد الجدول لتناسب التنسيق العمودي - زيادة عرض عمود الاسم
            table.autofit = False
            col_widths = [0.5, 2.6, 1.4, 0.7, 0.7, 0.7, 0.7, 0.7]  # زيادة عرض عمود الاسم (2.6 بدلاً من 2.0)

            # تطبيق العرض المحدد لكل عمود
            try:
                for i, width in enumerate(col_widths):
                    table.columns[i].width = Inches(width)
            except:
                # في حالة حدوث خطأ، نتجاهل تعديل العرض
                pass

            # إضافة مساحة بعد الجدول
            doc.add_paragraph()

            # إضافة جدول للتوقيعات
            sig_table = doc.add_table(rows=1, cols=3)
            sig_table.style = 'Table Grid'
            sig_cells = sig_table.rows[0].cells

            sig_cells[2].text = "مرشح الدورة: _________________"
            sig_cells[1].text = "مراقب الفصول: ______________"
            sig_cells[0].text = "رئيس قصم الفصول: __________________"

            for cell in sig_cells:
                cell.paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER
                for run in cell.paragraphs[0].runs:
                    run.font.rtl = True
                    run.font.size = Pt(11)

            # إضافة ملاحظات في نهاية المستند
            doc.add_paragraph()
            notes_para = doc.add_paragraph()
            notes_para.alignment = WD_ALIGN_PARAGRAPH.RIGHT
            notes_para.add_run("ملاحظات:").bold = True

            # إضافة خطوط للملاحظات
            for _ in range(3):
                line_para = doc.add_paragraph("_" * 80)
                line_para.alignment = WD_ALIGN_PARAGRAPH.RIGHT

            # حفظ المستند
            export_file = filedialog.asksaveasfilename(
                defaultextension=".docx",
                filetypes=[("Word documents", "*.docx")],
                initialfile=f"كشف_حضور_{section_name}_{course_name}.docx"
            )

            if export_file:
                doc.save(export_file)
                messagebox.showinfo("نجاح", f"تم تصدير كشف الحضور لفصل '{section_name}' بنجاح إلى:\n{export_file}")
                # فتح الملف مباشرة بعد التصدير
                try:
                    os.startfile(export_file)
                except:
                    # في حالة عدم تمكن النظام من فتح الملف، تجاهل الخطأ
                    pass

        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء تصدير بيانات الفصل: {str(e)}")

    def export_section_diligence_behavior(self, course_name, section_name):
        """وظيفة تصدير بيان المواظبة والسلوك للفصل المحدد مع خصم درجات المخالفات"""
        if not self.current_user["permissions"]["can_export_data"]:
            messagebox.showwarning("تنبيه", "ليس لديك صلاحية تصدير البيانات")
            return

        try:
            # التأكد من وجود مكتبة python-docx
            if 'Document' not in globals():
                messagebox.showerror("خطأ",
                                     "لم يتم العثور على مكتبة python-docx. قم بتثبيتها باستخدام: pip install python-docx")
                return

            # الحصول على بيانات المتدربين في الفصل المحدد (فقط غير المستبعدين)
            cursor = self.conn.cursor()
            cursor.execute("""
                SELECT t.national_id, t.name, t.rank
                FROM trainees t
                JOIN student_sections s ON t.national_id = s.national_id
                WHERE t.course=? AND s.section_name=? AND t.is_excluded=0
                ORDER BY t.name
            """, (course_name, section_name))
            students_data = cursor.fetchall()

            if not students_data:
                messagebox.showinfo("ملاحظة",
                                    f"لا يوجد متدربين نشطين مسجلين في فصل '{section_name}' من دورة '{course_name}'")
                return

            # إنشاء نافذة حالة لإظهار تقدم التصدير
            progress_window = tk.Toplevel(self.root)
            progress_window.title("جاري حساب المواظبة والسلوك")
            progress_window.geometry("400x150")
            progress_window.configure(bg=self.colors["light"])
            progress_window.transient(self.root)
            progress_window.resizable(False, False)
            progress_window.grab_set()

            x = (progress_window.winfo_screenwidth() - 400) // 2
            y = (progress_window.winfo_screenheight() - 150) // 2
            progress_window.geometry(f"400x150+{x}+{y}")

            tk.Label(
                progress_window,
                text=f"جاري حساب نتائج المواظبة والسلوك لفصل: {section_name}",
                font=self.fonts["text_bold"],
                bg=self.colors["light"],
                pady=10
            ).pack()

            progress_var = tk.DoubleVar()
            progress_bar = ttk.Progressbar(
                progress_window,
                variable=progress_var,
                maximum=100,
                length=350
            )
            progress_bar.pack(pady=10)

            status_label = tk.Label(
                progress_window,
                text="جاري تحليل بيانات الحضور والغياب...",
                font=self.fonts["text"],
                bg=self.colors["light"]
            )
            status_label.pack(pady=5)

            progress_window.update()

            # إنشاء مستند جديد
            doc = Document()

            # إعداد المستند للغة العربية (RTL)
            section = doc.sections[0]
            section.page_width = Inches(8.27)  # A4 width
            section.page_height = Inches(11.69)  # A4 height
            section.left_margin = Inches(0.7)
            section.right_margin = Inches(0.7)
            section.top_margin = Inches(0.7)
            section.bottom_margin = Inches(0.7)

            # إضافة عنوان المستند
            title = doc.add_heading(f'بيان المواظبة والسلوك لمتدربين فصل: {section_name} - دورة: {course_name}',
                                    level=0)
            title.alignment = WD_ALIGN_PARAGRAPH.CENTER
            for run in title.runs:
                run.font.size = Pt(16)
                run.font.bold = True
                run.font.rtl = True

            # إضافة معلومات الطباعة والتاريخ
            date_info = doc.add_paragraph()
            date_info.alignment = WD_ALIGN_PARAGRAPH.LEFT
            today_date = datetime.datetime.now().strftime("%Y-%m-%d")
            date_run = date_info.add_run(f'تاريخ الطباعة: {today_date}')
            date_run.font.size = Pt(10)
            date_run.font.rtl = True

            # إضافة خط أفقي
            border_paragraph = doc.add_paragraph()
            border_paragraph.paragraph_format.border_bottom = True

            # إنشاء جدول للمواظبة والسلوك
            table = doc.add_table(rows=1, cols=6)
            table.style = 'Table Grid'

            # عناوين الجدول (من اليمين إلى اليسار)
            hdr_cells = table.rows[0].cells
            headers = ["عدد", "الاسم", "الرتبة", "رقم الهوية", "المواظبة", "السلوك"]

            for i, header in enumerate(headers):
                # حساب الموقع المناسب للعناوين (من اليمين إلى اليسار)
                idx = len(headers) - i - 1
                hdr_cells[idx].text = header
                hdr_cells[idx].paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER
                for run in hdr_cells[idx].paragraphs[0].runs:
                    run.font.bold = True
                    run.font.size = Pt(12)
                    run.font.rtl = True

                # تطبيق تظليل للرأس
                try:
                    shading_elm = parse_xml(r'<w:shd {} w:fill="D9D9D9"/>'.format(nsdecls('w')))
                    hdr_cells[idx]._element.get_or_add_tcPr().append(shading_elm)
                except:
                    pass

            # معالجة بيانات كل متدرب وحساب درجة المواظبة والسلوك
            student_scores = []
            total_students = len(students_data)

            # قاموس لتخزين تفاصيل خصومات السلوك
            behavior_deductions_details = {}

            for index, student in enumerate(students_data):
                national_id, name, rank = student

                # تحديث شريط التقدم
                progress_var.set((index / total_students) * 80)  # 80% للمعالجة
                status_label.config(text=f"معالجة المتدرب {index + 1} من {total_students}: {name}")
                progress_window.update()

                # حساب درجة المواظبة:
                cursor.execute("""
                    SELECT status
                    FROM attendance
                    WHERE national_id=?
                """, (national_id,))
                attendance_records = cursor.fetchall()

                diligence_score = 100.0  # البداية من 100

                for record in attendance_records:
                    status = record[0]
                    if status == "غائب":
                        diligence_score -= 4.0
                    elif status == "غائب بعذر":
                        diligence_score -= 4.0
                    elif status == "متأخر":
                        diligence_score -= 1.0
                    elif status == "حالة وفاة" or status == "منوم":
                        diligence_score -= 2.0

                # التأكد من عدم نزول الدرجة عن صفر
                diligence_score = max(0, diligence_score)

                # حساب درجة السلوك مع خصم المخالفات
                behavior_score = 100.0

                # الحصول على مخالفات المتدرب
                cursor.execute("""
                    SELECT violation_type, violation_date, behavior_deduction, action_taken, custom_action
                    FROM student_violations
                    WHERE national_id=?
                    ORDER BY violation_date DESC
                """, (national_id,))

                violations = cursor.fetchall()
                total_deduction = 0
                violation_details = []

                for violation in violations:
                    v_type, v_date, deduction, action, custom_action = violation

                    # الحصول على نوع المخالفة المخصص
                    cursor.execute("""
                        SELECT custom_violation_type 
                        FROM student_violations 
                        WHERE national_id=? AND violation_date=? AND violation_type=?
                        LIMIT 1
                    """, (national_id, v_date, v_type))

                    custom_type_result = cursor.fetchone()
                    custom_violation_type = custom_type_result[0] if custom_type_result else ""

                    if deduction and deduction > 0:
                        total_deduction += deduction
                        # استخدام النوع المخصص إذا كان النوع "أخرى"
                        violation_type_text = custom_violation_type if v_type == "أخرى" and custom_violation_type else v_type
                        # استخدام الإجراء المخصص إذا كان الإجراء "أخرى"
                        action_text = custom_action if action == "أخرى" and custom_action else action

                        violation_details.append({
                            'type': violation_type_text,
                            'date': v_date,
                            'deduction': deduction,
                            'action': action_text
                        })

                behavior_score -= total_deduction
                behavior_score = max(0, behavior_score)  # التأكد من عدم نزول الدرجة عن صفر

                # حفظ تفاصيل الخصومات إذا وجدت
                if violation_details:
                    behavior_deductions_details[national_id] = {
                        'name': name,
                        'violations': violation_details
                    }

                # حفظ بيانات المتدرب مع الدرجة
                student_scores.append((national_id, name, rank, diligence_score, behavior_score))

            # ترتيب المتدربين تصاعدياً حسب درجة المواظبة (الأقل يأتي أولاً)
            student_scores.sort(key=lambda x: x[3])

            # إضافة بيانات المتدربين إلى الجدول بعد الترتيب
            for index, (national_id, name, rank, diligence_score, behavior_score) in enumerate(student_scores):
                # تحديث شريط التقدم
                progress_var.set(80 + (index / total_students) * 15)  # 15% للترتيب والإضافة
                status_label.config(text=f"إضافة المتدرب {index + 1} من {total_students} إلى التقرير")
                progress_window.update()

                # إضافة صف جديد للمتدرب
                row_cells = table.add_row().cells

                # الترتيب من اليمين إلى اليسار
                row_cells[5].text = str(index + 1)  # العدد التسلسلي
                row_cells[4].text = name  # الاسم
                row_cells[3].text = rank  # الرتبة
                row_cells[2].text = national_id  # رقم الهوية
                row_cells[1].text = f"{diligence_score:.1f}"  # المواظبة بدقة رقم عشري واحد
                row_cells[0].text = f"{behavior_score:.1f}"  # السلوك مع خصم المخالفات

                # تنسيق الخلايا
                for cell in row_cells:
                    cell.paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER
                    for run in cell.paragraphs[0].runs:
                        run.font.rtl = True
                        run.font.size = Pt(11)

                # تلوين الصف حسب درجة المواظبة أو السلوك
                if diligence_score < 90 or behavior_score < 90:
                    try:
                        for cell in row_cells:
                            shading_elm = parse_xml(r'<w:shd {} w:fill="FFDDDD"/>'.format(nsdecls('w')))
                            cell._element.get_or_add_tcPr().append(shading_elm)
                    except:
                        pass

            # تنسيق الجدول
            table.autofit = False
            try:
                # تعيين عرض الأعمدة (العرض بالبوصة)
                widths = [0.8, 0.8, 1.2, 1.5, 2.5, 0.5]  # السلوك، المواظبة، الهوية، الرتبة، الاسم، العدد
                for i, width in enumerate(widths):
                    table.columns[i].width = Inches(width)
            except:
                pass

            # إضافة فقرة فاصلة بعد الجدول
            doc.add_paragraph()

            # إضافة جدول للتوقيعات
            signature_table = doc.add_table(rows=1, cols=3)
            signature_table.style = 'Table Grid'

            sig_cells = signature_table.rows[0].cells
            sig_cells[2].text = "مسؤول الحضور: _________________"
            sig_cells[1].text = "رئيس القسم: __________________"
            sig_cells[0].text = "مدير التدريب: ________________"

            for cell in sig_cells:
                cell.paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER
                for run in cell.paragraphs[0].runs:
                    run.font.rtl = True
                    run.font.size = Pt(11)

            # إضافة نص توضيحي في نهاية المستند
            doc.add_paragraph()
            note_para = doc.add_paragraph()
            note_para.alignment = WD_ALIGN_PARAGRAPH.RIGHT
            note_run = note_para.add_run("ملاحظات حساب المواظبة:")
            note_run.font.bold = True
            note_run.font.rtl = True

            notes = [
                "- تبدأ درجة المواظبة من 100 درجة.",
                "- يتم خصم 4 درجات عن كل يوم غياب.",
                "- يتم خصم 4 درجات عن كل غياب بعذر.",
                "- يتم خصم 1 درجة عن كل حالة تأخير.",
                "- يتم خصم 2 درجة عن كل حالة وفاة.",
                "- يتم خصم 2 درجة عن كل حالة منوم.",
                "- درجة السلوك تبدأ من 100 درجة ويتم خصم الدرجات حسب المخالفات المسجلة."
            ]

            for note in notes:
                p = doc.add_paragraph()
                p.alignment = WD_ALIGN_PARAGRAPH.RIGHT
                p.add_run(note).font.rtl = True

            # إضافة تفاصيل خصومات السلوك إذا وجدت
            if behavior_deductions_details:
                doc.add_paragraph()

                # عنوان قسم تفاصيل خصومات السلوك
                deductions_title = doc.add_paragraph()
                deductions_title.alignment = WD_ALIGN_PARAGRAPH.RIGHT
                deductions_run = deductions_title.add_run("تفاصيل خصومات درجات السلوك:")
                deductions_run.font.bold = True
                deductions_run.font.rtl = True
                deductions_run.font.size = Pt(14)

                # إنشاء جدول لتفاصيل الخصومات
                deductions_table = doc.add_table(rows=1, cols=5)
                deductions_table.style = 'Table Grid'

                # عناوين الجدول
                headers = ["اسم المتدرب", "نوع المخالفة", "تاريخ المخالفة", "الإجراء المتخذ", "الخصم"]
                hdr_cells = deductions_table.rows[0].cells

                for i, header in enumerate(headers):
                    idx = len(headers) - i - 1
                    hdr_cells[idx].text = header
                    hdr_cells[idx].paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER
                    for run in hdr_cells[idx].paragraphs[0].runs:
                        run.font.bold = True
                        run.font.rtl = True
                        run.font.size = Pt(10)

                    # تطبيق تظليل للرأس
                    try:
                        shading_elm = parse_xml(r'<w:shd {} w:fill="E0E0E0"/>'.format(nsdecls('w')))
                        hdr_cells[idx]._element.get_or_add_tcPr().append(shading_elm)
                    except:
                        pass

                # إضافة بيانات الخصومات
                for student_id, details in behavior_deductions_details.items():
                    for violation in details['violations']:
                        row_cells = deductions_table.add_row().cells

                        row_cells[4].text = details['name']
                        row_cells[3].text = violation['type']
                        row_cells[2].text = violation['date']
                        row_cells[1].text = violation['action']
                        row_cells[0].text = f"{violation['deduction']} درجة"

                        # تنسيق الخلايا
                        for cell in row_cells:
                            cell.paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER
                            for run in cell.paragraphs[0].runs:
                                run.font.rtl = True
                                run.font.size = Pt(9)

            # تحديث شريط التقدم
            progress_var.set(95)
            status_label.config(text="فتح حوار حفظ الملف...")
            progress_window.update()

            # حفظ المستند
            export_file = filedialog.asksaveasfilename(
                defaultextension=".docx",
                filetypes=[("Word documents", "*.docx")],
                initialfile=f"بيان_المواظبة_والسلوك_{section_name}_{course_name}.docx"
            )

            if export_file:
                progress_var.set(95)
                status_label.config(text="جاري حفظ الملف...")
                progress_window.update()

                doc.save(export_file)

                progress_var.set(100)
                status_label.config(text="تم تصدير البيان بنجاح!")
                progress_window.update()

                # إغلاق نافذة التقدم بعد ثانيتين
                progress_window.after(2000, progress_window.destroy)

                messagebox.showinfo("نجاح",
                                    f"تم تصدير بيان المواظبة والسلوك للفصل '{section_name}' بنجاح إلى:\n{export_file}")

                # محاولة فتح الملف تلقائيًا
                try:
                    os.startfile(export_file)
                except:
                    pass
            else:
                progress_window.destroy()

        except Exception as e:
            try:
                progress_window.destroy()
            except:
                pass
            messagebox.showerror("خطأ", f"حدث خطأ أثناء تصدير بيان المواظبة والسلوك: {str(e)}")

    def backup_database(self):
        """إنشاء نسخة احتياطية من قاعدة البيانات"""
        if not self.current_user["permissions"]["is_admin"]:
            messagebox.showwarning("تنبيه", "هذه الوظيفة متاحة للمشرفين فقط")
            return

        import shutil
        import datetime
        import os

        # إنشاء مجلد للنسخ الاحتياطي إذا لم يكن موجوداً
        backup_dir = "backup"
        if not os.path.exists(backup_dir):
            os.makedirs(backup_dir)

        # إنشاء اسم ملف النسخة الاحتياطية مع التاريخ والوقت
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_file = os.path.join(backup_dir, f"attendance_backup_{current_time}.db")

        # إغلاق الاتصال بقاعدة البيانات مؤقتاً
        self.conn.commit()

        try:
            # نسخ ملف قاعدة البيانات
            shutil.copy2("attendance.db", backup_file)
            messagebox.showinfo("نجاح", f"تم إنشاء نسخة احتياطية في: {backup_file}")
        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء إنشاء النسخة الاحتياطية: {str(e)}")
